/*
	Redactor 10.2.5
	Updated: October 1, 2015

	http://imperavi.com/redactor/

	Copyright (c) 2009-2015, Imperavi LLC.
	License: http://imperavi.com/redactor/license/

	Usage: $('#content').redactor();
*/
(function (t) { 'use strict'; function e(t, a) { return new e.prototype.init(t, a) } Function.prototype.bind || (Function.prototype.bind = function (e) { var t = this; return function () { return t.apply(e) } }); var a = 0; t.fn.redactor = function (a) { var o = [], r = Array.prototype.slice.call(arguments, 1); return "string" == typeof a ? this.each(function () { var e, l = t.data(this, "redactor"); if ("-1" == a.search(/\./) ? e = l[a] : (e = a.split("."), "undefined" != typeof l[e[0]] && (e = l[e[0]][e[1]])), "undefined" != typeof l && t.isFunction(e)) { var n = e.apply(l, r); void 0 !== n && n !== l && o.push(n) } else t.error("No such method \"" + a + "\" for Redactor") }) : this.each(function () { t.data(this, "redactor", {}), t.data(this, "redactor", e(this, a)) }), 0 === o.length ? this : 1 === o.length ? o[0] : o }, t.Redactor = e, t.Redactor.VERSION = "10.2.5", t.Redactor.modules = ["alignment", "autosave", "block", "buffer", "build", "button", "caret", "clean", "code", "core", "dropdown", "file", "focus", "image", "indent", "inline", "insert", "keydown", "keyup", "lang", "line", "link", "linkify", "list", "modal", "observe", "paragraphize", "paste", "placeholder", "progress", "selection", "shortcuts", "tabifier", "tidy", "toolbar", "upload", "utils"], t.Redactor.opts = { lang: "en", direction: "ltr", plugins: !1, focus: !1, focusEnd: !1, placeholder: !1, visual: !0, tabindex: !1, minHeight: !1, maxHeight: !1, linebreaks: !1, replaceDivs: !0, paragraphize: !0, cleanStyleOnEnter: !1, enterKey: !0, cleanOnPaste: !0, cleanSpaces: !0, pastePlainText: !1, autosave: !1, autosaveName: !1, autosaveInterval: 60, autosaveOnChange: !1, autosaveFields: !1, linkTooltip: !0, linkProtocol: "http", linkNofollow: !1, linkSize: 50, imageEditable: !0, imageLink: !0, imagePosition: !0, imageFloatMargin: "10px", imageResizable: !0, imageUpload: null, imageUploadParam: "file", uploadImageField: !1, dragImageUpload: !0, fileUpload: null, fileUploadParam: "file", dragFileUpload: !0, s3: !1, convertLinks: !0, convertUrlLinks: !0, convertImageLinks: !0, convertVideoLinks: !0, preSpaces: 4, tabAsSpaces: !1, tabKey: !0, scrollTarget: !1, toolbar: !0, toolbarFixed: !0, toolbarFixedTarget: document, toolbarFixedTopOffset: 0, toolbarExternal: !1, toolbarOverflow: !1, source: !0, buttons: ["html", "formatting", "bold", "italic", "deleted", "unorderedlist", "orderedlist", "outdent", "indent", "image", "file", "link", "alignment", "horizontalrule"], buttonsHide: [], buttonsHideOnMobile: [], formatting: ["p", "blockquote", "pre", "h1", "h2", "h3", "h4", "h5", "h6"], formattingAdd: !1, tabifier: !0, deniedTags: ["script", "style"], allowedTags: !1, paragraphizeBlocks: ["table", "div", "pre", "form", "ul", "ol", "h1", "h2", "h3", "h4", "h5", "h6", "dl", "blockquote", "figcaption", "address", "section", "header", "footer", "aside", "article", "object", "style", "script", "iframe", "select", "input", "textarea", "button", "option", "map", "area", "math", "hr", "fieldset", "legend", "hgroup", "nav", "figure", "details", "menu", "summary", "p"], removeComments: !1, replaceTags: [["strike", "del"], ["b", "strong"]], replaceStyles: [["font-weight:\\s?bold", "strong"], ["font-style:\\s?italic", "em"], ["text-decoration:\\s?underline", "u"], ["text-decoration:\\s?line-through", "del"]], removeDataAttr: !1, removeAttr: !1, allowedAttr: !1, removeWithoutAttr: ["span"], removeEmpty: ["p"], activeButtons: ["deleted", "italic", "bold", "underline", "unorderedlist", "orderedlist", "alignleft", "aligncenter", "alignright", "justify"], activeButtonsStates: { b: "bold", strong: "bold", i: "italic", em: "italic", del: "deleted", strike: "deleted", ul: "unorderedlist", ol: "orderedlist", u: "underline" }, shortcuts: { "ctrl+shift+m, meta+shift+m": { func: "inline.removeFormat" }, "ctrl+b, meta+b": { func: "inline.format", params: ["bold"] }, "ctrl+i, meta+i": { func: "inline.format", params: ["italic"] }, "ctrl+h, meta+h": { func: "inline.format", params: ["superscript"] }, "ctrl+l, meta+l": { func: "inline.format", params: ["subscript"] }, "ctrl+k, meta+k": { func: "link.show" }, "ctrl+shift+7": { func: "list.toggle", params: ["orderedlist"] }, "ctrl+shift+8": { func: "list.toggle", params: ["unorderedlist"] } }, shortcutsAdd: !1, buffer: [], rebuffer: [], emptyHtml: "<p>&#x200b;</p>", invisibleSpace: "&#x200b;", imageTypes: ["image/png", "image/jpeg", "image/gif"], indentValue: 20, verifiedTags: ["a", "img", "b", "strong", "sub", "sup", "i", "em", "u", "small", "strike", "del", "cite", "ul", "ol", "li"], inlineTags: ["strong", "b", "u", "em", "i", "code", "del", "ins", "samp", "kbd", "sup", "sub", "mark", "var", "cite", "small"], alignmentTags: ["P", "H1", "H2", "H3", "H4", "H5", "H6", "DL", "DT", "DD", "DIV", "TD", "BLOCKQUOTE", "OUTPUT", "FIGCAPTION", "ADDRESS", "SECTION", "HEADER", "FOOTER", "ASIDE", "ARTICLE"], blockLevelElements: ["PRE", "UL", "OL", "LI"], highContrast: !1, observe: { dropdowns: [] }, langs: { en: { html: "HTML", video: "Insert Video", image: "Insert Image", table: "Table", link: "Link", link_insert: "Insert link", link_edit: "Edit link", unlink: "Unlink", formatting: "Formatting", paragraph: "Normal text", quote: "Quote", code: "Code", header1: "Header 1", header2: "Header 2", header3: "Header 3", header4: "Header 4", header5: "Header 5", bold: "Bold", italic: "Italic", fontcolor: "Font Color", backcolor: "Back Color", unorderedlist: "Unordered List", orderedlist: "Ordered List", outdent: "Outdent", indent: "Indent", cancel: "Cancel", insert: "Insert", save: "Save", _delete: "Delete", insert_table: "Insert Table", insert_row_above: "Add Row Above", insert_row_below: "Add Row Below", insert_column_left: "Add Column Left", insert_column_right: "Add Column Right", delete_column: "Delete Column", delete_row: "Delete Row", delete_table: "Delete Table", rows: "Rows", columns: "Columns", add_head: "Add Head", delete_head: "Delete Head", title: "Title", image_position: "Position", none: "None", left: "Left", right: "Right", center: "Center", image_web_link: "Image Web Link", text: "Text", mailto: "Email", web: "URL", video_html_code: "Video Embed Code or Youtube/Vimeo Link", file: "Insert File", upload: "Upload", download: "Download", choose: "Choose", or_choose: "Or choose", drop_file_here: "Drop file here", align_left: "Align text to the left", align_center: "Center text", align_right: "Align text to the right", align_justify: "Justify text", horizontalrule: "Insert Horizontal Rule", deleted: "Deleted", anchor: "Anchor", link_new_tab: "Open link in new tab", underline: "Underline", alignment: "Alignment", filename: "Name (optional)", edit: "Edit", upload_label: "Drop file here or " } }, linkify: { regexps: { youtube: /https?:\/\/(?:[0-9A-Z-]+\.)?(?:youtu\.be\/|youtube\.com\S*[^\w\-\s])([\w\-]{11})(?=[^\w\-]|$)(?![?=&+%\w.\-]*(?:['"][^<>]*>|<\/a>))[?=&+%\w.-]*/ig, vimeo: /https?:\/\/(www\.)?vimeo.com\/(\d+)($|\/)/, image: /((https?|www)[^\s]+\.)(jpe?g|png|gif)(\?[^\s-]+)?/ig, url: /(https?:\/\/(?:www\.|(?!www))[^\s\.]+\.[^\s]{2,}|www\.[^\s]+\.[^\s]{2,})/ig } }, codemirror: !1 }, e.fn = t.Redactor.prototype = { keyCode: { BACKSPACE: 8, DELETE: 46, UP: 38, DOWN: 40, ENTER: 13, SPACE: 32, ESC: 27, TAB: 9, CTRL: 17, META: 91, SHIFT: 16, ALT: 18, RIGHT: 39, LEFT: 37, LEFT_WIN: 91 }, init: function (e, o) { if (this.$element = t(e), this.uuid = a++ , this.rtePaste = !1, this.$pasteBox = !1, this.loadOptions(o), this.loadModules(), this.formatting = {}, t.merge(this.opts.blockLevelElements, this.opts.alignmentTags), this.reIsBlock = new RegExp("^(" + this.opts.blockLevelElements.join("|") + ")$", "i"), this.tidy.setupAllowed(), !1 !== this.opts.deniedTags) for (var r = ["html", "head", "link", "body", "meta", "applet"], l = 0; l < r.length; l++)this.opts.deniedTags.push(r[l]); this.lang.load(), t.extend(this.opts.shortcuts, this.opts.shortcutsAdd), this.core.setCallback("start"), this.start = !0, this.build.run() }, loadOptions: function (e) { this.opts = t.extend({}, t.extend(!0, {}, t.Redactor.opts), this.$element.data(), e) }, getModuleMethods: function (e) { return Object.getOwnPropertyNames(e).filter(function (t) { return "function" == typeof e[t] }) }, loadModules: function () { for (var e = t.Redactor.modules.length, a = 0; a < e; a++)this.bindModuleMethods(t.Redactor.modules[a]) }, bindModuleMethods: function (e) { if ("undefined" != typeof this[e]) { this[e] = this[e](); for (var t = this.getModuleMethods(this[e]), a = t.length, o = 0; o < a; o++)this[e][t[o]] = this[e][t[o]].bind(this) } }, alignment: function () { return { left: function () { this.alignment.set("") }, right: function () { this.alignment.set("right") }, center: function () { this.alignment.set("center") }, justify: function () { this.alignment.set("justify") }, set: function (e) { this.utils.browser("msie") || this.opts.linebreaks || this.$editor.focus(), this.alignment.blocks = this.selection.getBlocks(), this.alignment.type = e, this.buffer.set(), this.selection.save(), this.alignment.isLinebreaksOrNoBlocks() ? this.alignment.setText() : this.alignment.setBlocks(), this.selection.restore(), this.code.sync() }, setText: function () { var e = this.selection.wrap("div"); t(e).attr("data-tagblock", "redactor").css("text-align", this.alignment.type) }, setBlocks: function () { t.each(this.alignment.blocks, t.proxy(function (e, t) { var a = this.utils.getAlignmentElement(t); a && (this.alignment.isNeedReplaceElement(a) ? this.alignment.replaceElement(a) : this.alignment.alignElement(a)) }, this)) }, isLinebreaksOrNoBlocks: function () { return this.opts.linebreaks && !1 === this.alignment.blocks[0] }, isNeedReplaceElement: function (e) { return "" === this.alignment.type && "undefined" != typeof e.data("tagblock") }, replaceElement: function (e) { e.replaceWith(e.html()) }, alignElement: function (e) { e.css("text-align", this.alignment.type), this.utils.removeEmptyAttr(e, "style") } } }, autosave: function () { return { html: !1, enable: function () { this.opts.autosave && (this.autosave.name = this.opts.autosaveName ? this.opts.autosaveName : this.$textarea.attr("name"), this.opts.autosaveOnChange || (this.autosaveInterval = setInterval(this.autosave.load, 1e3 * this.opts.autosaveInterval))) }, onChange: function () { this.opts.autosaveOnChange && this.autosave.load() }, load: function () { if (this.opts.autosave && (this.autosave.source = this.code.get(), this.autosave.html !== this.autosave.source)) { var e = {}; e.name = this.autosave.name, e[this.autosave.name] = this.autosave.source, e = this.autosave.getHiddenFields(e); var a = t.ajax({ url: this.opts.autosave, type: "post", data: e }); a.done(this.autosave.success) } }, getHiddenFields: function (e) { return !1 === this.opts.autosaveFields || "object" != typeof this.opts.autosaveFields ? e : (t.each(this.opts.autosaveFields, t.proxy(function (a, o) { null !== o && 0 === o.toString().indexOf("#") && (o = t(o).val()), e[a] = o }, this)), e) }, success: function (a) { var o; try { o = t.parseJSON(a) } catch (t) { o = a } var r = "undefined" == typeof o.error ? "autosave" : "autosaveError"; this.core.setCallback(r, this.autosave.name, o), this.autosave.html = this.autosave.source }, disable: function () { clearInterval(this.autosaveInterval) } } }, block: function () { return { formatting: function (e) { this.block.clearStyle = !1; var t, a; "undefined" == typeof this.formatting[e].data ? "undefined" == typeof this.formatting[e].attr ? "undefined" != typeof this.formatting[e]["class"] && (t = "class") : t = "attr" : t = "data", "undefined" != typeof this.formatting[e].clear && (this.block.clearStyle = !0), t && (a = this.formatting[e][t]), this.block.format(this.formatting[e].tag, t, a) }, format: function (e, a, o) { "quote" == e && (e = "blockquote"); if (-1 != t.inArray(e, ["p", "pre", "blockquote", "h1", "h2", "h3", "h4", "h5", "h6"])) { this.block.isRemoveInline = "pre" == e || -1 != e.search(/h[1-6]/i), this.utils.browser("msie") || this.$editor.focus(); var r = t.trim(this.$editor.html()); if (this.block.isEmpty = this.utils.isEmpty(r), this.utils.browser("mozilla") && !this.focus.isFocused() && this.block.isEmpty) { var l; this.opts.linebreaks || (l = this.$editor.children().first(), this.caret.setEnd(l)) } this.block.blocks = this.selection.getBlocks(), this.block.blocksSize = this.block.blocks.length, this.block.type = a, this.block.value = o, this.buffer.set(), this.selection.save(), this.block.set(e), this.selection.restore(), this.code.sync(), this.observe.load() } }, set: function (e) { this.selection.get(), this.block.containerTag = this.range.commonAncestorContainer.tagName, this.range.collapsed ? this.block.setCollapsed(e) : this.block.setMultiple(e) }, setCollapsed: function (e) { if (this.opts.linebreaks && this.block.isEmpty && "p" != e) { var a = document.createElement(e); return this.$editor.html(a), void this.caret.setEnd(a) } var o = this.block.blocks[0]; if (!1 !== o) { if ("LI" == o.tagName) return "blockquote" == e ? void this.block.formatListToBlockquote() : void 0; var r = "TD" == this.block.containerTag || "TH" == this.block.containerTag; if (r && !this.opts.linebreaks) document.execCommand("formatblock", !1, "<" + e + ">"), o = this.selection.getBlock(), this.block.toggle(t(o)); else if (o.tagName.toLowerCase() != e) { if (this.opts.linebreaks && "p" == e) t(o).append("<br>"), this.utils.replaceWithContents(o); else { var l = this.utils.replaceToTag(o, e); this.block.toggle(l), "p" != e && "blockquote" != e && l.find("img").remove(), this.block.isRemoveInline && this.utils.removeInlineTags(l), ("p" == e || this.block.headTag) && l.find("p").contents().unwrap(), this.block.formatTableWrapping(l) } } else if ("blockquote" != e || o.tagName.toLowerCase() != e) o.tagName.toLowerCase() == e && this.block.toggle(t(o)); else if (this.opts.linebreaks) t(o).append("<br>"), this.utils.replaceWithContents(o); else { var n = this.utils.replaceToTag(o, "p"); this.block.toggle(n) } "undefined" == typeof this.block.type && "undefined" == typeof this.block.value && t(o).removeAttr("class").removeAttr("style") } }, setMultiple: function (e) { var a = this.block.blocks[0], o = "TD" == this.block.containerTag || "TH" == this.block.containerTag; if (!1 !== a && 1 === this.block.blocksSize) { if (a.tagName.toLowerCase() == e && "blockquote" == e) { if (this.opts.linebreaks) t(a).append("<br>"), this.utils.replaceWithContents(a); else { var r = this.utils.replaceToTag(a, "p"); this.block.toggle(r) } } else if ("LI" == a.tagName) { if ("blockquote" != e) return; this.block.formatListToBlockquote() } else if ("BLOCKQUOTE" == this.block.containerTag) this.block.formatBlockquote(e); else if (this.opts.linebreaks && (o || this.range.commonAncestorContainer != a)) this.block.formatWrap(e); else if (this.opts.linebreaks && "p" == e) t(a).prepend("<br>").append("<br>"), this.utils.replaceWithContents(a); else if ("TD" === a.tagName) this.block.formatWrap(e); else { var l = this.utils.replaceToTag(a, e); this.block.toggle(l), this.block.isRemoveInline && this.utils.removeInlineTags(l), ("p" == e || this.block.headTag) && l.find("p").contents().unwrap() } } else if (this.opts.linebreaks || "p" != e) { if ("blockquote" == e) { for (var n = 0, s = 0; s < this.block.blocksSize; s++)"BLOCKQUOTE" == this.block.blocks[s].tagName && n++; if (n == this.block.blocksSize) return void t.each(this.block.blocks, t.proxy(function (e, a) { var o = !1; this.opts.linebreaks ? (t(a).prepend("<br>").append("<br>"), o = this.utils.replaceWithContents(a)) : o = this.utils.replaceToTag(a, "p"), o && "undefined" == typeof this.block.type && "undefined" == typeof this.block.value && o.removeAttr("class").removeAttr("style") }, this)) } this.block.formatWrap(e) } else { var d = 0, c = !1; "class" == this.block.type && (c = "toggle", d = t(this.block.blocks).filter("." + this.block.value).length, this.block.blocksSize == d ? c = "toggle" : this.block.blocksSize > d ? c = "set" : 0 === d && (c = "set")); var p = ["ul", "ol", "li", "td", "th", "dl", "dt", "dd"]; t.each(this.block.blocks, t.proxy(function (a, o) { if (-1 == t.inArray(o.tagName.toLowerCase(), p)) { var r = this.utils.replaceToTag(o, e); c ? "toggle" == c ? this.block.toggle(r) : "remove" == c ? this.block.remove(r) : "set" == c && this.block.setForce(r) : this.block.toggle(r), "p" != e && "blockquote" != e && r.find("img").remove(), this.block.isRemoveInline && this.utils.removeInlineTags(r), ("p" == e || this.block.headTag) && r.find("p").contents().unwrap(), "undefined" == typeof this.block.type && "undefined" == typeof this.block.value && r.removeAttr("class").removeAttr("style") } }, this)) } }, setForce: function (e) { return (this.block.clearStyle && e.removeAttr("class").removeAttr("style"), "class" == this.block.type) ? void e.addClass(this.block.value) : "attr" == this.block.type || "data" == this.block.type ? void e.attr(this.block.value.name, this.block.value.value) : void 0 }, toggle: function (e) { return this.block.clearStyle && e.removeAttr("class").removeAttr("style"), "class" == this.block.type ? void e.toggleClass(this.block.value) : "attr" == this.block.type || "data" == this.block.type ? void (e.attr(this.block.value.name) == this.block.value.value ? e.removeAttr(this.block.value.name) : e.attr(this.block.value.name, this.block.value.value)) : void e.removeAttr("style class") }, remove: function (e) { e.removeClass(this.block.value) }, formatListToBlockquote: function () { var e = t(this.block.blocks[0]).closest("ul, ol", this.$editor[0]); t(e).find("ul, ol").contents().unwrap(), t(e).find("li").append(t("<br>")).contents().unwrap(); var a = this.utils.replaceToTag(e, "blockquote"); this.block.toggle(a) }, formatBlockquote: function (e) { document.execCommand("outdent"), document.execCommand("formatblock", !1, e), this.clean.clearUnverified(), this.$editor.find("p:empty").remove(); var a = this.selection.getBlock(); "p" != e && t(a).find("img").remove(), this.opts.linebreaks || this.block.toggle(t(a)), this.$editor.find("ul, ol, tr, blockquote, p").each(t.proxy(this.utils.removeEmpty, this)), this.opts.linebreaks && "p" == e && this.utils.replaceWithContents(a) }, formatWrap: function (e) { if ("UL" == this.block.containerTag || "OL" == this.block.containerTag) if ("blockquote" == e) this.block.formatListToBlockquote(); else return; var a = this.selection.wrap(e); if (!1 !== a) { var o = t(a); this.block.formatTableWrapping(o); var r = o.find(this.opts.blockLevelElements.join(",") + ", td, table, thead, tbody, tfoot, th, tr"); if (r.contents().unwrap(), "p" != e && "blockquote" != e && o.find("img").remove(), t.each(this.block.blocks, t.proxy(this.utils.removeEmpty, this)), o.append(this.selection.getMarker(2)), this.opts.linebreaks || this.block.toggle(o), this.$editor.find("ul, ol, tr, blockquote, p").each(t.proxy(this.utils.removeEmpty, this)), o.find("blockquote:empty").remove(), this.block.isRemoveInline && this.utils.removeInlineTags(o), this.opts.linebreaks && "p" == e && this.utils.replaceWithContents(o), this.opts.linebreaks) { var l = o.next().next(); 0 != l.length && "BR" === l[0].tagName && l.remove() } } }, formatTableWrapping: function (e) { 0 === e.closest("table", this.$editor[0]).length || (0 === e.closest("tr", this.$editor[0]).length && e.wrap("<tr>"), 0 === e.closest("td", this.$editor[0]).length && 0 === e.closest("th").length && e.wrap("<td>")) }, removeData: function (e) { var a = this.selection.getBlocks(); t(a).removeAttr("data-" + e), this.code.sync() }, setData: function (e, a) { var o = this.selection.getBlocks(); t(o).attr("data-" + e, a), this.code.sync() }, toggleData: function (e, a) { var o = this.selection.getBlocks(); t.each(o, function () { t(this).attr("data-" + e) ? t(this).removeAttr("data-" + e) : t(this).attr("data-" + e, a) }) }, removeAttr: function (e) { var a = this.selection.getBlocks(); t(a).removeAttr(e), this.code.sync() }, setAttr: function (e, a) { var o = this.selection.getBlocks(); t(o).attr(e, a), this.code.sync() }, toggleAttr: function (e, a) { var o = this.selection.getBlocks(); t.each(o, function () { t(this).attr(name) ? t(this).removeAttr(name) : t(this).attr(name, a) }) }, removeClass: function (e) { var a = this.selection.getBlocks(); t(a).removeClass(e), this.utils.removeEmptyAttr(a, "class"), this.code.sync() }, setClass: function (e) { var a = this.selection.getBlocks(); t(a).addClass(e), this.code.sync() }, toggleClass: function (e) { var a = this.selection.getBlocks(); t(a).toggleClass(e), this.code.sync() } } }, buffer: function () { return { set: function (e) { "undefined" == typeof e || "undo" == e ? this.buffer.setUndo() : this.buffer.setRedo() }, setUndo: function () { this.selection.save(), this.opts.buffer.push(this.$editor.html()), this.selection.restore() }, setRedo: function () { this.selection.save(), this.opts.rebuffer.push(this.$editor.html()), this.selection.restore() }, getUndo: function () { this.$editor.html(this.opts.buffer.pop()) }, getRedo: function () { this.$editor.html(this.opts.rebuffer.pop()) }, add: function () { this.opts.buffer.push(this.$editor.html()) }, undo: function () { 0 === this.opts.buffer.length || (this.buffer.set("redo"), this.buffer.getUndo(), this.selection.restore(), setTimeout(t.proxy(this.observe.load, this), 50)) }, redo: function () { 0 === this.opts.rebuffer.length || (this.buffer.set("undo"), this.buffer.getRedo(), this.selection.restore(), setTimeout(t.proxy(this.observe.load, this), 50)) } } }, build: function () { return { focused: !1, blured: !0, run: function () { this.build.createContainerBox(), this.build.loadContent(), this.build.loadEditor(), this.build.enableEditor(), this.build.setCodeAndCall() }, isTextarea: function () { return "TEXTAREA" === this.$element[0].tagName }, createContainerBox: function () { this.$box = t("<div class=\"redactor-box\" role=\"application\" />") }, createTextarea: function () { this.$textarea = t("<textarea />").attr("name", this.build.getTextareaName()) }, getTextareaName: function () { return "undefined" == typeof name ? "content-" + this.uuid : this.$element.attr("id") }, loadContent: function () { var e = this.build.isTextarea() ? "val" : "html"; this.content = t.trim(this.$element[e]()) }, enableEditor: function () { this.$editor.attr({ contenteditable: !0, dir: this.opts.direction }) }, loadEditor: function () { var e = this.build.isTextarea() ? "fromTextarea" : "fromElement"; this.build[e]() }, fromTextarea: function () { this.$editor = t("<div />"), this.$textarea = this.$element, this.$box.insertAfter(this.$element).append(this.$editor).append(this.$element), this.$editor.addClass("redactor-editor"), this.$element.hide() }, fromElement: function () { this.$editor = this.$element, this.build.createTextarea(), this.$box.insertAfter(this.$editor).append(this.$editor).append(this.$textarea), this.$editor.addClass("redactor-editor"), this.$textarea.hide() }, setCodeAndCall: function () { this.code.set(this.content), this.build.setOptions(), this.build.callEditor(); this.opts.visual || setTimeout(t.proxy(this.code.showCode, this), 200) }, callEditor: function () { this.build.disableMozillaEditing(), this.build.disableIeLinks(), this.build.setEvents(), this.build.setHelpers(), this.opts.toolbar && (this.opts.toolbar = this.toolbar.init(), this.toolbar.build()), this.modal.loadTemplates(), this.build.plugins(), setTimeout(t.proxy(this.observe.load, this), 4), this.core.setCallback("init") }, setOptions: function () { t(this.$textarea).attr("dir", this.opts.direction), this.opts.linebreaks && this.$editor.addClass("redactor-linebreaks"), this.opts.tabindex && this.$editor.attr("tabindex", this.opts.tabindex), this.opts.minHeight && this.$editor.css("minHeight", this.opts.minHeight), this.opts.maxHeight && this.$editor.css("maxHeight", this.opts.maxHeight) }, setEventDropUpload: function (t) { if (t.preventDefault(), this.opts.dragImageUpload && this.opts.dragFileUpload) { var e = t.dataTransfer.files; this.upload.directUpload(e[0], t) } }, setEventDrop: function (t) { this.code.sync(), setTimeout(this.clean.clearUnverified, 1), this.core.setCallback("drop", t) }, setEvents: function () { this.$editor.on("dragover.redactor dragenter.redactor", function (t) { t.preventDefault(), t.stopPropagation() }), this.$editor.on("drop.redactor", t.proxy(function (t) { return !(t = t.originalEvent || t, void 0 !== window.FormData && t.dataTransfer) || (0 === t.dataTransfer.files.length ? this.build.setEventDrop(t) : void (this.build.setEventDropUpload(t), setTimeout(this.clean.clearUnverified, 1), this.core.setCallback("drop", t))) }, this)), this.$editor.on("click.redactor", t.proxy(function (t) { var e = this.core.getEvent(); this.core.addEvent("click" != e && "arrow" != e && "click"), this.utils.disableSelectAll(), this.core.setCallback("click", t) }, this)), this.$editor.on("paste.redactor", t.proxy(this.paste.init, this)), this.$editor.on("cut.redactor", t.proxy(this.code.sync, this)), this.$editor.on("keydown.redactor", t.proxy(this.keydown.init, this)), this.$editor.on("keyup.redactor", t.proxy(this.keyup.init, this)), t.isFunction(this.opts.codeKeydownCallback) && this.$textarea.on("keydown.redactor-textarea", t.proxy(this.opts.codeKeydownCallback, this)), t.isFunction(this.opts.codeKeyupCallback) && this.$textarea.on("keyup.redactor-textarea", t.proxy(this.opts.codeKeyupCallback, this)), this.$editor.on("focus.redactor", t.proxy(function (a) { t.isFunction(this.opts.focusCallback) && this.core.setCallback("focus", a), this.build.focused = !0, this.build.blured = !1, !1 === this.selection.getCurrent() && (this.selection.get(), this.range.setStart(this.$editor[0], 0), this.range.setEnd(this.$editor[0], 0), this.selection.addRange()) }, this)), t(document).on("mousedown.redactor-blur." + this.uuid, t.proxy(function (a) { this.start || this.rtePaste || 0 !== t(a.target).closest(".redactor-editor, .redactor-toolbar, .redactor-dropdown").length || (this.utils.disableSelectAll(), !this.build.blured && t.isFunction(this.opts.blurCallback) && this.core.setCallback("blur", a), this.build.focused = !1, this.build.blured = !0) }, this)) }, setHelpers: function () { this.linkify.isEnabled() && this.linkify.format(), this.placeholder.enable(), this.opts.focus && setTimeout(this.focus.setStart, 100), this.opts.focusEnd && setTimeout(this.focus.setEnd, 100) }, plugins: function () { this.opts.plugins && t.each(this.opts.plugins, t.proxy(function (a, o) { var r = "undefined" != typeof RedactorPlugins && "undefined" != typeof RedactorPlugins[o] ? RedactorPlugins : e.fn; if (t.isFunction(r[o])) { this[o] = r[o](); for (var l = this.getModuleMethods(this[o]), n = l.length, i = 0; i < n; i++)this[o][l[i]] = this[o][l[i]].bind(this); t.isFunction(this[o].init) && this[o].init() } }, this)) }, disableMozillaEditing: function () { if (this.utils.browser("mozilla")) try { document.execCommand("enableObjectResizing", !1, !1), document.execCommand("enableInlineTableEditing", !1, !1) } catch (t) { } }, disableIeLinks: function () { this.utils.browser("msie") && document.execCommand("AutoUrlDetect", !1, !1) } } }, button: function () { return { build: function (e, a) { var o = t("<a href=\"#\" class=\"re-icon re-" + e + "\" rel=\"" + e + "\" />").attr({ role: "button", "aria-label": a.title, tabindex: "-1" }); if ((a.func || a.command || a.dropdown) && this.button.setEvent(o, e, a), a.dropdown) { o.addClass("redactor-toolbar-link-dropdown").attr("aria-haspopup", !0); var r = t("<div class=\"redactor-dropdown redactor-dropdown-" + this.uuid + " redactor-dropdown-box-" + e + "\" style=\"display: none;\">"); o.data("dropdown", r), this.dropdown.build(e, r, a.dropdown) } return this.utils.isDesktop() && this.button.createTooltip(o, e, a.title), o }, setEvent: function (a, o, r) { a.on("touchstart click", t.proxy(function (t) { if (a.hasClass("redactor-button-disabled")) return !1; var e = "func", l = r.func; r.command ? (e = "command", l = r.command) : r.dropdown && (e = "dropdown", l = !1), this.button.onClick(t, o, e, l) }, this)) }, createTooltip: function (e, a, o) { var r = t("<span>").addClass("redactor-toolbar-tooltip redactor-toolbar-tooltip-" + this.uuid + " redactor-toolbar-tooltip-" + a).hide().html(o); r.appendTo("body"), e.on("mouseover", function () { if (!t(this).hasClass("redactor-button-disabled")) { var a = e.offset(); r.css({ top: a.top + e.innerHeight() + "px", left: a.left + e.innerWidth() / 2 - r.innerWidth() / 2 + "px" }), r.show() } }), e.on("mouseout", function () { r.hide() }) }, onClick: function (a, e, o, r) { this.button.caretOffset = this.caret.getOffset(), a.preventDefault(), t(document).find(".redactor-toolbar-tooltip").hide(), this.utils.browser("msie") && (a.returnValue = !1), "command" == o ? this.inline.format(r) : "dropdown" == o ? this.dropdown.show(a, e) : this.button.onClickCallback(a, r, e) }, onClickCallback: function (a, e, o) { var r; if (t.isFunction(e)) e.call(this, o); else if ("-1" != e.search(/\./)) { if (r = e.split("."), "undefined" == typeof this[r[0]]) return; this[r[0]][r[1]](o) } else this[e](o); this.observe.buttons(a, o) }, get: function (e) { return this.$toolbar.find("a.re-" + e) }, setActive: function (e) { this.button.get(e).addClass("redactor-act") }, setInactive: function (e) { this.button.get(e).removeClass("redactor-act") }, setInactiveAll: function (e) { "undefined" == typeof e ? this.$toolbar.find("a.re-icon").removeClass("redactor-act") : this.$toolbar.find("a.re-icon").not(".re-" + e).removeClass("redactor-act") }, setActiveInVisual: function () { this.$toolbar.find("a.re-icon").not("a.re-html, a.re-fullscreen").removeClass("redactor-button-disabled") }, setInactiveInCode: function () { this.$toolbar.find("a.re-icon").not("a.re-html, a.re-fullscreen").addClass("redactor-button-disabled") }, changeIcon: function (e, t) { this.button.get(e).addClass("re-" + t) }, removeIcon: function (e, t) { this.button.get(e).removeClass("re-" + t) }, setAwesome: function (e, t) { var a = this.button.get(e); a.removeClass("redactor-btn-image").addClass("fa-redactor-btn"), a.html("<i class=\"fa " + t + "\"></i>") }, addCallback: function (a, o) { if ("buffer" != a) { var r = "dropdown" == o ? "dropdown" : "func", l = a.attr("rel"); a.on("touchstart click", t.proxy(function (t) { return !a.hasClass("redactor-button-disabled") && void this.button.onClick(t, l, r, o) }, this)) } }, addDropdown: function (e, a) { e.addClass("redactor-toolbar-link-dropdown").attr("aria-haspopup", !0); var o = e.attr("rel"); this.button.addCallback(e, "dropdown"); var r = t("<div class=\"redactor-dropdown redactor-dropdown-" + this.uuid + " redactor-dropdown-box-" + o + "\" style=\"display: none;\">"); return e.data("dropdown", r), a && this.dropdown.build(o, r, a), r }, add: function (e, a) { if (this.opts.toolbar) { if (this.button.isMobileUndoRedo(e)) return "buffer"; var o = this.button.build(e, { title: a }); return o.addClass("redactor-btn-image"), this.$toolbar.append(t("<li>").append(o)), o } }, addFirst: function (e, a) { if (this.opts.toolbar) { if (this.button.isMobileUndoRedo(e)) return "buffer"; var o = this.button.build(e, { title: a }); return o.addClass("redactor-btn-image"), this.$toolbar.prepend(t("<li>").append(o)), o } }, addAfter: function (e, a, o) { if (this.opts.toolbar) { if (this.button.isMobileUndoRedo(a)) return "buffer"; var r = this.button.build(a, { title: o }); r.addClass("redactor-btn-image"); var l = this.button.get(e); return 0 === l.length ? this.$toolbar.append(t("<li>").append(r)) : l.parent().after(t("<li>").append(r)), r } }, addBefore: function (e, a, o) { if (this.opts.toolbar) { if (this.button.isMobileUndoRedo(a)) return "buffer"; var r = this.button.build(a, { title: o }); r.addClass("redactor-btn-image"); var l = this.button.get(e); return 0 === l.length ? this.$toolbar.append(t("<li>").append(r)) : l.parent().before(t("<li>").append(r)), r } }, remove: function (e) { this.button.get(e).remove() }, isMobileUndoRedo: function (e) { return ("undo" == e || "redo" == e) && !this.utils.isDesktop() } } }, caret: function () { return { setStart: function (e) { if (!this.utils.isBlock(e)) { var a = this.utils.createSpaceElement(); t(e).prepend(a), this.caret.setEnd(a) } else this.caret.set(e, 0, e, 0) }, setEnd: function (e) { return e = e[0] || e, 1 == e.lastChild.nodeType ? this.caret.setAfter(e.lastChild) : void this.caret.set(e, 1, e, 1) }, set: function (e, a, o, r) { if (e = e[0] || e, o = o[0] || o, this.utils.isBlockTag(e.tagName) && "" === e.innerHTML && (e.innerHTML = this.opts.invisibleSpace), "BR" == e.tagName && !1 === this.opts.linebreaks) { var l = t(this.opts.emptyHtml)[0]; t(e).replaceWith(l), e = l, o = e } this.selection.get(); try { this.range.setStart(e, a), this.range.setEnd(o, r) } catch (t) { } this.selection.addRange() }, setAfter: function (a) { try { var o = t(a)[0].tagName; if ("BR" != o && !this.utils.isBlock(a)) { var r = this.utils.createSpaceElement(); t(a).after(r), this.caret.setEnd(r) } else "BR" != o && this.utils.browser("msie") ? this.caret.setStart(t(a).next()) : this.caret.setAfterOrBefore(a, "after") } catch (o) { var r = this.utils.createSpaceElement(); t(a).after(r), this.caret.setEnd(r) } }, setBefore: function (e) { this.utils.isBlock(e) ? this.caret.setEnd(t(e).prev()) : this.caret.setAfterOrBefore(e, "before") }, setAfterOrBefore: function (e, t) { if (this.utils.browser("msie") || this.$editor.focus(), e = e[0] || e, this.selection.get(), "after" == t) try { this.range.setStartAfter(e), this.range.setEndAfter(e) } catch (t) { } else try { this.range.setStartBefore(e), this.range.setEndBefore(e) } catch (t) { } this.range.collapse(!1), this.selection.addRange() }, getOffsetOfElement: function (e) { e = e[0] || e, this.selection.get(); var a = this.range.cloneRange(); return a.selectNodeContents(e), a.setEnd(this.range.endContainer, this.range.endOffset), t.trim(a.toString()).length }, getOffset: function () { var e = 0, t = window.getSelection(); if (0 < t.rangeCount) { var a = window.getSelection().getRangeAt(0), o = a.cloneRange(); o.selectNodeContents(this.$editor[0]), o.setEnd(a.endContainer, a.endOffset), e = o.toString().length } return e }, setOffset: function (e, t) { "undefined" == typeof t && (t = e), this.focus.isFocused() || this.focus.setStart(); for (var a, o = this.selection.get(), r = 0, l = document.createTreeWalker(this.$editor[0], NodeFilter.SHOW_TEXT, null, null); a = l.nextNode();)if (r += a.nodeValue.length, r > e && (this.range.setStart(a, a.nodeValue.length + e - r), e = 1 / 0), r >= t) { this.range.setEnd(a, a.nodeValue.length + t - r); break } this.range.collapse(!1), this.selection.addRange() }, setToPoint: function (e, t) { this.caret.setOffset(e, t) }, getCoords: function () { return this.caret.getOffset() } } }, clean: function () { return { onSet: function (e) { e = this.clean.savePreCode(e), e = e.replace(/<script(.*?[^>]?)>([\w\W]*?)<\/script>/gi, "<pre class=\"redactor-script-tag\" style=\"display: none;\" $1>$2</pre>"), e = e.replace(/\$/g, "&#36;"), e = e.replace(/<a href="(.*?[^>]?)®(.*?[^>]?)">/gi, "<a href=\"$1&reg$2\">"), this.opts.replaceDivs && !this.opts.linebreaks && (e = this.clean.replaceDivs(e)), this.opts.linebreaks && (e = this.clean.replaceParagraphsToBr(e)), e = this.clean.saveFormTags(e); var a = t("<div>"); a.html(e); var o = a.find("font[style]"); return 0 !== o.length && (o.replaceWith(function () { var e = t(this), a = t("<span>").attr("style", e.attr("style")); return a.append(e.contents()) }), e = a.html()), a.remove(), e = e.replace(/<font(.*?)>/gi, ""), e = e.replace(/<\/font>/gi, ""), e = this.tidy.load(e), this.opts.paragraphize && (e = this.paragraphize.load(e)), e = this.clean.setVerified(e), e = this.clean.convertInline(e), e = e.replace(/&amp;/g, "&"), e }, onSync: function (e) { if (e = e.replace(/\u200B/g, ""), e = e.replace(/&#x200b;/gi, ""), this.opts.cleanSpaces && (e = e.replace(/&nbsp;/gi, " ")), -1 != e.search(/^<p>(||\s||<br\s?\/?>||&nbsp;)<\/p>$/i)) return ""; e = e.replace(/<pre class="redactor-script-tag" style="display: none;"(.*?[^>]?)>([\w\W]*?)<\/pre>/gi, "<script$1>$2</script>"), e = this.clean.restoreFormTags(e); t.each({ "™": "&trade;", "©": "&copy;", "…": "&hellip;", "—": "&mdash;", "‐": "&dash;" }, function (t, a) { e = e.replace(new RegExp(t, "g"), a) }), this.utils.browser("mozilla") && (e = e.replace(/<br\s?\/?>$/gi, "")), e = e.replace(/<br\s?\/?><\/li>/gi, "</li>"), e = e.replace(/<\/li><br\s?\/?>/gi, "</li>"), e = e.replace(/<(.*?)rel="\s*?"(.*?[^>]?)>/gi, "<$1$2\">"), e = e.replace(/<(.*?)style="\s*?"(.*?[^>]?)>/gi, "<$1$2\">"), e = e.replace(/="">/gi, ">"), e = e.replace(/""">/gi, "\">"), e = e.replace(/"">/gi, "\">"), e = e.replace(/<div(.*?)data-tagblock="redactor"(.*?[^>])>/gi, "<div$1$2>"), e = e.replace(/<(.*?) data-verified="redactor"(.*?[^>])>/gi, "<$1$2>"); var a = t("<div/>").html(t.parseHTML(e, document, !0)); return a.find("span").removeAttr("rel"), a.find("pre .redactor-invisible-space").each(function () { t(this).contents().unwrap() }), e = a.html(), e = e.replace(/<img(.*?[^>])rel="(.*?[^>])"(.*?[^>])>/gi, "<img$1$3>"), e = e.replace(/<span class="redactor-invisible-space">(.*?)<\/span>/gi, "$1"), e = e.replace(/ data-save-url="(.*?[^>])"/gi, ""), e = e.replace(/<span(.*?)id="redactor-image-box"(.*?[^>])>([\w\W]*?)<img(.*?)><\/span>/gi, "$3<img$4>"), e = e.replace(/<span(.*?)id="redactor-image-resizer"(.*?[^>])>(.*?)<\/span>/gi, ""), e = e.replace(/<span(.*?)id="redactor-image-editter"(.*?[^>])>(.*?)<\/span>/gi, ""), e = e.replace(/<font(.*?)>/gi, ""), e = e.replace(/<\/font>/gi, ""), e = this.tidy.load(e), this.opts.linkNofollow && (e = e.replace(/<a(.*?)rel="nofollow"(.*?[^>])>/gi, "<a$1$2>"), e = e.replace(/<a(.*?[^>])>/gi, "<a$1 rel=\"nofollow\">")), e = e.replace(/\sdata-redactor-(tag|class|style)="(.*?[^>])"/gi, ""), e = e.replace(/<(.*?) data-verified="redactor"(.*?[^>])>/gi, "<$1$2>"), e = e.replace(/<(.*?) data-verified="redactor">/gi, "<$1>"), e = e.replace(/&amp;/g, "&"), e }, onPaste: function (e, a) { if (e = t.trim(e), e = e.replace(/\$/g, "&#36;"), e = e.replace(/<span class="s[0-9]">/gi, "<span>"), e = e.replace(/<span class="Apple-converted-space">&nbsp;<\/span>/gi, " "), e = e.replace(/<span class="Apple-tab-span"[^>]*>\t<\/span>/gi, "\t"), e = e.replace(/<span[^>]*>(\s|&nbsp;)<\/span>/gi, " "), this.opts.pastePlainText) return this.clean.getPlainText(e); if (!this.utils.isSelectAll() && "undefined" == typeof a) { if (this.utils.isCurrentOrParent(["FIGCAPTION", "A"])) return this.clean.getPlainText(e, !1); if (this.utils.isCurrentOrParent("PRE")) return e = e.replace(/”/g, "\""), e = e.replace(/“/g, "\""), e = e.replace(/‘/g, "'"), e = e.replace(/’/g, "'"), this.clean.getPreCode(e); if (this.utils.isCurrentOrParent(["BLOCKQUOTE", "H1", "H2", "H3", "H4", "H5", "H6"])) { if (e = this.clean.getOnlyImages(e), !this.utils.browser("msie")) { var o = this.selection.getBlock(); o && "P" == o.tagName && (e = e.replace(/<img(.*?)>/gi, "<p><img$1></p>")) } return e } if (this.utils.isCurrentOrParent(["TD"])) return e = this.clean.onPasteTidy(e, "td"), this.opts.linebreaks && (e = this.clean.replaceParagraphsToBr(e)), e = this.clean.replaceDivsToBr(e), e; if (this.utils.isCurrentOrParent(["LI"])) return this.clean.onPasteTidy(e, "li") } return e = this.clean.isSingleLine(e, a), this.clean.singleLine || (this.opts.linebreaks && (e = this.clean.replaceParagraphsToBr(e)), this.opts.replaceDivs && (e = this.clean.replaceDivs(e)), e = this.clean.saveFormTags(e)), e = this.clean.onPasteWord(e), e = this.clean.onPasteExtra(e), e = this.clean.onPasteTidy(e, "all"), !this.clean.singleLine && this.opts.paragraphize && (e = this.paragraphize.load(e)), e = this.clean.removeDirtyStyles(e), e = this.clean.onPasteRemoveSpans(e), e = this.clean.onPasteRemoveEmpty(e), e = this.clean.convertInline(e), e }, onPasteWord: function (e) { if (e = e.replace(/<!--[\s\S]*?-->/gi, ""), e = e.replace(/<style[^>]*>[\s\S]*?<\/style>/gi, ""), e = e.replace(/<o\:p[^>]*>[\s\S]*?<\/o\:p>/gi, ""), e.match(/class="?Mso|style="[^"]*\bmso-|style='[^'']*\bmso-|w:WordDocument/i)) { e = e.replace(/<!--[\s\S]+?-->/gi, ""), e = e.replace(/<(!|script[^>]*>.*?<\/script(?=[>\s])|\/?(\?xml(:\w+)?|img|meta|link|style|\w:\w+)(?=[\s\/>]))[^>]*>/gi, ""), e = e.replace(/<(\/?)s>/gi, "<$1strike>"), e = e.replace(/ /gi, " "), e = e.replace(/<span\s+style\s*=\s*"\s*mso-spacerun\s*:\s*yes\s*;?\s*"\s*>([\s\u00a0]*)<\/span>/gi, function (e, t) { return 0 < t.length ? t.replace(/./, " ").slice(Math.floor(t.length / 2)).split("").join("\xA0") : "" }), e = this.clean.onPasteIeFixLinks(e), e = e.replace(/<img(.*?)v:shapes=(.*?)>/gi, ""), e = e.replace(/src="file\:\/\/(.*?)"/, "src=\"\""); var a = t("<div/>").html(e), o = !1, r = 1, l = []; a.find("p[style]").each(function () { var e = t(this).attr("style").match(/mso\-list\:l([0-9]+)\slevel([0-9]+)/); if (e) { var n = parseInt(e[1]), s = parseInt(e[2]), d = t(this).html().match(/^[\w]+\./) ? "ol" : "ul", c = t("<li/>").html(t(this).html()); if (c.html(c.html().replace(/^([\w\.]+)</, "<")), c.find("span:first").remove(), 1 == s && -1 == t.inArray(n, l)) { var p = t("<" + d + "/>").attr({ "data-level": s, "data-list": n }).html(c); t(this).replaceWith(p), o = n, l.push(n) } else { if (s > r) { for (var u = a.find("[data-level=\"" + r + "\"][data-list=\"" + o + "\"]"), m = u, g = r; g < s; g++)p = t("<" + d + "/>"), p.appendTo(m.find("li").last()), m = p; m.attr({ "data-level": s, "data-list": n }).html(c) } else { var u = a.find("[data-level=\"" + s + "\"][data-list=\"" + n + "\"]").last(); u.append(c) } r = s, o = n, t(this).remove() } } }), a.find("[data-level][data-list]").removeAttr("data-level data-list"), e = a.html(), e = e.replace(/·/g, ""), e = e.replace(/<p class="Mso(.*?)"/gi, "<p"), e = e.replace(/ class=\"(mso[^\"]*)\"/gi, ""), e = e.replace(/ class=(mso\w+)/gi, ""), e = e.replace(/<o:p(.*?)>([\w\W]*?)<\/o:p>/gi, "$2"), e = e.replace(/\n/g, " "), e = e.replace(/<p>\n?<li>/gi, "<li>") } return e }, onPasteExtra: function (e) { return e = e.replace(/<b\sid="internal-source-marker(.*?)">([\w\W]*?)<\/b>/gi, "$2"), e = e.replace(/<b(.*?)id="docs-internal-guid(.*?)">([\w\W]*?)<\/b>/gi, "$3"), e = e.replace(/<span[^>]*(font-style: italic; font-weight: bold|font-weight: bold; font-style: italic)[^>]*>/gi, "<span style=\"font-weight: bold;\"><span style=\"font-style: italic;\">"), e = e.replace(/<span[^>]*font-style: italic[^>]*>/gi, "<span style=\"font-style: italic;\">"), e = e.replace(/<span[^>]*font-weight: bold[^>]*>/gi, "<span style=\"font-weight: bold;\">"), e = e.replace(/<span[^>]*text-decoration: underline[^>]*>/gi, "<span style=\"text-decoration: underline;\">"), e = e.replace(/<img>/gi, ""), e = e.replace(/\n{3,}/gi, "\n"), e = e.replace(/<font(.*?)>([\w\W]*?)<\/font>/gi, "$2"), e = e.replace(/<p><p>/gi, "<p>"), e = e.replace(/<\/p><\/p>/gi, "</p>"), e = e.replace(/<li>(\s*|\t*|\n*)<p>/gi, "<li>"), e = e.replace(/<\/p>(\s*|\t*|\n*)<\/li>/gi, "</li>"), e = e.replace(/<\/p>\s<p/gi, "</p><p"), e = e.replace(/<img src="webkit-fake-url\:\/\/(.*?)"(.*?)>/gi, ""), e = e.replace(/<p>•([\w\W]*?)<\/p>/gi, "<li>$1</li>"), this.utils.browser("mozilla") && (e = e.replace(/<br\s?\/?>$/gi, "")), e }, onPasteTidy: function (e, t) { var a = ["span", "a", "pre", "blockquote", "small", "em", "strong", "code", "kbd", "mark", "address", "cite", "var", "samp", "dfn", "sup", "sub", "b", "i", "u", "del", "ol", "ul", "li", "dl", "dt", "dd", "p", "br", "video", "audio", "iframe", "embed", "param", "object", "img", "table", "td", "th", "tr", "tbody", "tfoot", "thead", "h1", "h2", "h3", "h4", "h5", "h6"], o = !1, r = [["a", "*"], ["img", ["src", "alt"]], ["span", ["class", "rel", "data-verified"]], ["iframe", "*"], ["video", "*"], ["audio", "*"], ["embed", "*"], ["object", "*"], ["param", "*"], ["source", "*"]]; "all" == t ? (o = ["p", "span", "h1", "h2", "h3", "h4", "h5", "h6"], r = [["table", "class"], ["td", ["colspan", "rowspan"]], ["a", "*"], ["img", ["src", "alt", "data-redactor-inserted-image"]], ["span", ["class", "rel", "data-verified"]], ["iframe", "*"], ["video", "*"], ["audio", "*"], ["embed", "*"], ["object", "*"], ["param", "*"], ["source", "*"]]) : "td" == t ? a = ["ul", "ol", "li", "span", "a", "small", "em", "strong", "code", "kbd", "mark", "cite", "var", "samp", "dfn", "sup", "sub", "b", "i", "u", "del", "ol", "ul", "li", "dl", "dt", "dd", "br", "iframe", "video", "audio", "embed", "param", "object", "img", "h1", "h2", "h3", "h4", "h5", "h6"] : "li" == t && (a = ["ul", "ol", "li", "span", "a", "small", "em", "strong", "code", "kbd", "mark", "cite", "var", "samp", "dfn", "sup", "sub", "b", "i", "u", "del", "br", "iframe", "video", "audio", "embed", "param", "object", "img"]); var l = { deniedTags: !!this.opts.deniedTags && this.opts.deniedTags, allowedTags: this.opts.allowedTags ? this.opts.allowedTags : a, removeComments: !0, removePhp: !0, removeAttr: !!this.opts.removeAttr && this.opts.removeAttr, allowedAttr: this.opts.allowedAttr ? this.opts.allowedAttr : r, removeEmpty: o }; return this.tidy.load(e, l) }, onPasteRemoveEmpty: function (e) { return e = e.replace(/<(p|h[1-6])>(|\s|\n|\t|<br\s?\/?>)<\/(p|h[1-6])>/gi, ""), this.opts.linebreaks || (e = e.replace(/<br>$/i, "")), e }, onPasteRemoveSpans: function (e) { return e = e.replace(/<span>(.*?)<\/span>/gi, "$1"), e = e.replace(/<span[^>]*>\s|&nbsp;<\/span>/gi, " "), e }, onPasteIeFixLinks: function (e) { if (!this.utils.browser("msie")) return e; var a = t.trim(e); return 0 === a.search(/^<a(.*?)>(.*?)<\/a>$/i) && (e = e.replace(/^<a(.*?)>(.*?)<\/a>$/i, "$2")), e }, isSingleLine: function (e, t) { if (this.clean.singleLine = !1, !this.utils.isSelectAll() && "undefined" == typeof t) { var a = this.opts.blockLevelElements.join("|").replace("P|", "").replace("DIV|", ""), o = e.match(new RegExp("</(" + a + ")>", "gi")), r = e.match(/<\/(p|div)>/gi); if (!o && (null === r || r && 1 >= r.length)) { var l = e.match(/<br\s?\/?>/gi); l || (this.clean.singleLine = !0, e = e.replace(/<\/?(p|div)(.*?)>/gi, "")) } } return e }, stripTags: function (e, t) { t = (((t || "") + "").toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join(""); var a = /<\/?([a-z][a-z0-9]*)\b[^>]*>/gi; return e.replace(a, function (e, a) { return -1 < t.indexOf("<" + a.toLowerCase() + ">") ? e : "" }) }, savePreCode: function (e) { return e = this.clean.savePreFormatting(e), e = this.clean.saveCodeFormatting(e), e = this.clean.restoreSelectionMarker(e), e }, savePreFormatting: function (e) { var a = e.match(/<pre(.*?)>([\w\W]*?)<\/pre>/gi); return null !== a && t.each(a, t.proxy(function (t, a) { var o = a.match(/<pre(.*?)>([\w\W]*?)<\/pre>/i); o[2] = o[2].replace(/<br\s?\/?>/g, "\n"), o[2] = o[2].replace(/&nbsp;/g, " "), this.opts.preSpaces && (o[2] = o[2].replace(/\t/g, Array(this.opts.preSpaces + 1).join(" "))), o[2] = this.clean.encodeEntities(o[2]), o[2] = o[2].replace(/\$/g, "&#36;"), e = e.replace(a, "<pre" + o[1] + ">" + o[2] + "</pre>") }, this)), e }, saveCodeFormatting: function (e) { var a = e.match(/<code(.*?)>([\w\W]*?)<\/code>/gi); return null !== a && t.each(a, t.proxy(function (t, a) { var o = a.match(/<code(.*?)>([\w\W]*?)<\/code>/i); o[2] = o[2].replace(/&nbsp;/g, " "), o[2] = this.clean.encodeEntities(o[2]), o[2] = o[2].replace(/\$/g, "&#36;"), e = e.replace(a, "<code" + o[1] + ">" + o[2] + "</code>") }, this)), e }, restoreSelectionMarker: function (e) { return e = e.replace(/&lt;span id=&quot;selection-marker-([0-9])&quot; class=&quot;redactor-selection-marker&quot; data-verified=&quot;redactor&quot;&gt;​&lt;\/span&gt;/g, "<span id=\"selection-marker-$1\" class=\"redactor-selection-marker\" data-verified=\"redactor\">\u200B</span>"), e }, getTextFromHtml: function (e) { e = e.replace(/<br\s?\/?>|<\/H[1-6]>|<\/p>|<\/div>|<\/li>|<\/td>/gi, "\n"); var a = document.createElement("div"); return a.innerHTML = e, e = a.textContent || a.innerText, t.trim(e) }, getPlainText: function (e, t) { return e = this.clean.getTextFromHtml(e), e = e.replace(/\n\s*\n/g, "\n"), e = e.replace(/\n\n/g, "\n"), e = e.replace(/\n/g, "<br />"), this.opts.paragraphize && "undefined" == typeof t && !this.utils.browser("mozilla") && (e = this.paragraphize.load(e)), e }, getPreCode: function (e) { return e = e.replace(/<img(.*?) style="(.*?)"(.*?[^>])>/gi, "<img$1$3>"), e = e.replace(/<img(.*?)>/gi, "&lt;img$1&gt;"), e = this.clean.getTextFromHtml(e), this.opts.preSpaces && (e = e.replace(/\t/g, Array(this.opts.preSpaces + 1).join(" "))), e = this.clean.encodeEntities(e), e }, getOnlyImages: function (e) { return e = e.replace(/<img(.*?)>/gi, "[img$1]"), e = e.replace(/<([Ss]*?)>/gi, ""), e = e.replace(/\[img(.*?)\]/gi, "<img$1>"), e }, getOnlyLinksAndImages: function (e) { return e = e.replace(/<a(.*?)href="(.*?)"(.*?)>([\w\W]*?)<\/a>/gi, "[a href=\"$2\"]$4[/a]"), e = e.replace(/<img(.*?)>/gi, "[img$1]"), e = e.replace(/<(.*?)>/gi, ""), e = e.replace(/\[a href="(.*?)"\]([\w\W]*?)\[\/a\]/gi, "<a href=\"$1\">$2</a>"), e = e.replace(/\[img(.*?)\]/gi, "<img$1>"), e }, encodeEntities: function (e) { return e = (e + "").replace(/&amp;/g, "&").replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&quot;/g, "\""), e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;") }, removeDirtyStyles: function (e) { if (this.utils.browser("msie")) return e; var a = document.createElement("div"); return a.innerHTML = e, this.clean.clearUnverifiedRemove(t(a)), e = a.innerHTML, t(a).remove(), e }, clearUnverified: function () { if (!this.utils.browser("msie")) { this.clean.clearUnverifiedRemove(this.$editor); var e = this.$editor.find("h1, h2, h3, h4, h5, h6"); e.find("span").removeAttr("style"), e.find(this.opts.verifiedTags.join(", ")).removeAttr("style"), this.code.sync() } }, clearUnverifiedRemove: function (e) { e.find(this.opts.verifiedTags.join(", ")).removeAttr("style"), e.find("span").not("[data-verified=\"redactor\"]").removeAttr("style"), e.find("span[data-verified=\"redactor\"], img[data-verified=\"redactor\"]").each(function (e, a) { var o = t(a); o.attr("style", o.attr("rel")) }) }, cleanEmptyParagraph: function () { }, setVerified: function (e) { if (this.utils.browser("msie")) return e; e = e.replace(/<img(.*?[^>])>/gi, "<img$1 data-verified=\"redactor\">"), e = e.replace(/<span(.*?[^>])>/gi, "<span$1 data-verified=\"redactor\">"); var t = e.match(/<(span|img)(.*?)style="(.*?)"(.*?[^>])>/gi); if (t) for (var a = t.length, o = 0; o < a; o++)try { var r = t[o].replace(/style="(.*?)"/i, "style=\"$1\" rel=\"$1\""); e = e.replace(t[o], r) } catch (t) { } return e }, convertInline: function (e) { var a = t("<div />").html(e), o = this.opts.inlineTags; return o.push("span"), a.find(o.join(",")).each(function () { var e = t(this), a = this.tagName.toLowerCase(); e.attr("data-redactor-tag", a), "span" == a && (e.attr("style") ? e.attr("data-redactor-style", e.attr("style")) : e.attr("class") && e.attr("data-redactor-class", e.attr("class"))) }), e = a.html(), a.remove(), e }, normalizeLists: function () { this.$editor.find("li").each(function (e, a) { var o = t(a).next(); 0 !== o.length && ("UL" == o[0].tagName || "OL" == o[0].tagName) && t(a).append(o) }) }, removeSpaces: function (e) { return e = e.replace(/\n/g, ""), e = e.replace(/[\t]*/g, ""), e = e.replace(/\n\s*\n/g, "\n"), e = e.replace(/^[\s\n]*/g, " "), e = e.replace(/[\s\n]*$/g, " "), e = e.replace(/>\s{2,}</g, "> <"), e = e.replace(/\n\n/g, "\n"), e = e.replace(/\u200B/g, ""), e }, replaceDivs: function (e) { return this.opts.linebreaks ? (e = e.replace(/<div><br\s?\/?><\/div>/gi, "<br />"), e = e.replace(/<div(.*?)>([\w\W]*?)<\/div>/gi, "$2<br />")) : e = e.replace(/<div(.*?)>([\w\W]*?)<\/div>/gi, "<p$1>$2</p>"), e = e.replace(/<div(.*?[^>])>/gi, ""), e = e.replace(/<\/div>/gi, ""), e }, replaceDivsToBr: function (e) { return e = e.replace(/<div\s(.*?)>/gi, "<p>"), e = e.replace(/<div><br\s?\/?><\/div>/gi, "<br /><br />"), e = e.replace(/<div>([\w\W]*?)<\/div>/gi, "$1<br /><br />"), e }, replaceParagraphsToBr: function (e) { return e = e.replace(/<p\s(.*?)>/gi, "<p>"), e = e.replace(/<p><br\s?\/?><\/p>/gi, "<br />"), e = e.replace(/<p>([\w\W]*?)<\/p>/gi, "$1<br /><br />"), e = e.replace(/(<br\s?\/?>){1,}\n?<\/blockquote>/gi, "</blockquote>"), e }, saveFormTags: function (e) { return e.replace(/<form(.*?)>([\w\W]*?)<\/form>/gi, "<section$1 rel=\"redactor-form-tag\">$2</section>") }, restoreFormTags: function (e) { return e.replace(/<section(.*?) rel="redactor-form-tag"(.*?)>([\w\W]*?)<\/section>/gi, "<form$1$2>$3</form>") } } }, code: function () { return { set: function (e) { e = t.trim(e.toString()), e = this.clean.onSet(e), this.utils.browser("msie") && (e = e.replace(/<span(.*?)id="selection-marker-(1|2)"(.*?)><\/span>/gi, "")), this.$editor.html(e), this.code.sync(), "" !== e && this.placeholder.remove(), setTimeout(t.proxy(this.buffer.add, this), 15), !1 === this.start && this.observe.load() }, get: function () { var e = this.$textarea.val(); return this.opts.replaceDivs && (e = this.clean.replaceDivs(e)), this.opts.linebreaks && (e = this.clean.replaceParagraphsToBr(e)), e = this.tabifier.get(e), e }, sync: function () { setTimeout(t.proxy(this.code.startSync, this), 10) }, startSync: function () { var e = this.$editor.html(); this.code.syncCode && this.code.syncCode == e || this.start && "" == e || (this.code.syncCode = e, e = this.core.setCallback("syncBefore", e), e = this.clean.onSync(e), this.$textarea.val(e), this.core.setCallback("sync", e), !1 === this.start && this.core.setCallback("change", e), this.start = !1, !1 == this.autosave.html && (this.autosave.html = this.code.get()), this.opts.codemirror && this.$textarea.next(".CodeMirror").each(function (t, a) { a.CodeMirror.setValue(e) }), this.autosave.onChange(), this.autosave.enable()) }, toggle: function () { this.opts.visual ? this.code.showCode() : this.code.showVisual() }, showCode: function () { this.selection.save(), this.code.offset = this.caret.getOffset(); var e = t(window).scrollTop(), a = this.$editor.innerWidth(), o = this.$editor.innerHeight(); this.$editor.hide(); var r = this.$textarea.val(); this.modified = this.clean.removeSpaces(r), r = this.tabifier.get(r); var l = 0, n = 0, i = t("<div/>").append(t.parseHTML(this.clean.onSync(this.$editor.html()), document, !0)), s = i.find("span.redactor-selection-marker"); if (0 < s.length) { var d = this.tabifier.get(i.html()).replace(/&amp;/g, "&"); 1 == s.length ? (l = this.utils.strpos(d, i.find("#selection-marker-1").prop("outerHTML")), n = l) : 2 == s.length && (l = this.utils.strpos(d, i.find("#selection-marker-1").prop("outerHTML")), n = this.utils.strpos(d, i.find("#selection-marker-2").prop("outerHTML")) - i.find("#selection-marker-1").prop("outerHTML").toString().length) } this.selection.removeMarkers(), this.$textarea.val(r), this.opts.codemirror ? this.$textarea.next(".CodeMirror").each(function (e, a) { t(a).show(), a.CodeMirror.setValue(r), a.CodeMirror.setSize("100%", o), a.CodeMirror.refresh(), l == n ? a.CodeMirror.setCursor(a.CodeMirror.posFromIndex(l).line, a.CodeMirror.posFromIndex(n).ch) : a.CodeMirror.setSelection({ line: a.CodeMirror.posFromIndex(l).line, ch: a.CodeMirror.posFromIndex(l).ch }, { line: a.CodeMirror.posFromIndex(n).line, ch: a.CodeMirror.posFromIndex(n).ch }), a.CodeMirror.focus() }) : (this.$textarea.height(o).show().focus(), this.$textarea.on("keydown.redactor-textarea-indenting", this.code.textareaIndenting), t(window).scrollTop(e), this.$textarea[0].setSelectionRange && this.$textarea[0].setSelectionRange(l, n), this.$textarea[0].scrollTop = 0), this.opts.visual = !1, this.button.setInactiveInCode(), this.button.setActive("html"), this.core.setCallback("source", r) }, showVisual: function () { var e; if (!this.opts.visual) { var t = 0, a = 0; if (this.opts.codemirror) { var o; this.$textarea.next(".CodeMirror").each(function (r, l) { o = l.CodeMirror.listSelections(), t = l.CodeMirror.indexFromPos(o[0].anchor), a = l.CodeMirror.indexFromPos(o[0].head), e = l.CodeMirror.getValue() }) } else t = this.$textarea.get(0).selectionStart, a = this.$textarea.get(0).selectionEnd, e = this.$textarea.hide().val(); if (t > a && 0 < a) { var r = a, l = t; t = r, a = l } if (t = this.code.enlargeOffset(e, t), a = this.code.enlargeOffset(e, a), e = e.substr(0, t) + this.selection.getMarkerAsHtml(1) + e.substr(t), a > t) { var n = this.selection.getMarkerAsHtml(1).toString().length; e = e.substr(0, a + n) + this.selection.getMarkerAsHtml(2) + e.substr(a + n) } this.modified !== this.clean.removeSpaces(e) && this.code.set(e), this.opts.codemirror && this.$textarea.next(".CodeMirror").hide(), this.$editor.show(), this.utils.isEmpty(e) || this.placeholder.remove(), this.selection.restore(), this.$textarea.off("keydown.redactor-textarea-indenting"), this.button.setActiveInVisual(), this.button.setInactive("html"), this.observe.load(), this.opts.visual = !0, this.core.setCallback("visual", e) } }, textareaIndenting: function (t) { if (9 !== t.keyCode) return !0; var e = this.$textarea, a = e.get(0).selectionStart; return e.val(e.val().substring(0, a) + "\t" + e.val().substring(e.get(0).selectionEnd)), e.get(0).selectionStart = e.get(0).selectionEnd = a + 1, !1 }, enlargeOffset: function (e, t) { var a = e.length, o = 0; if (">" == e[t]) o++; else for (var r = t; r <= a && (o++ , ">" != e[r]); r++)if ("<" == e[r] || r == a) { o = 0; break } return t + o } } }, core: function () { return { getObject: function () { return t.extend({}, this) }, getEditor: function () { return this.$editor }, getBox: function () { return this.$box }, getElement: function () { return this.$element }, getTextarea: function () { return this.$textarea }, getToolbar: function () { return !!this.$toolbar && this.$toolbar }, addEvent: function (e) { this.core.event = e }, getEvent: function () { return this.core.event }, setCallback: function (a, o, e) { var r = a + "Callback", l = this.opts[r]; if (this.$textarea) { var n = !1, i = t._data(this.$textarea[0], "events"); if ("undefined" != typeof i && "undefined" != typeof i[r] && t.each(i[r], t.proxy(function (e, t) { if (t.namespace == "redactor") { var a = "undefined" == typeof a ? [o] : [o, a]; n = "undefined" == typeof a ? t.handler.call(this, o) : t.handler.call(this, o, a) } }, this)), n) return n } return t.isFunction(l) ? "undefined" == typeof e ? l.call(this, o) : l.call(this, o, e) : "undefined" == typeof e ? o : e }, destroy: function () { this.opts.destroyed = !0, this.core.setCallback("destroy"), this.$element.off(".redactor").removeData("redactor"), this.$editor.off(".redactor"), t(document).off("mousedown.redactor-blur." + this.uuid), t(document).off("mousedown.redactor." + this.uuid), t(document).off("click.redactor-image-delete." + this.uuid), t(document).off("click.redactor-image-resize-hide." + this.uuid), t(document).off("touchstart.redactor." + this.uuid + " click.redactor." + this.uuid), t("body").off("scroll.redactor." + this.uuid), t(this.opts.toolbarFixedTarget).off("scroll.redactor." + this.uuid), this.$editor.removeClass("redactor-editor redactor-linebreaks redactor-placeholder"), this.$editor.removeAttr("contenteditable"); var e = this.code.get(); this.opts.toolbar && this.$toolbar.find("a").each(function () { var e = t(this); e.data("dropdown") && (e.data("dropdown").remove(), e.data("dropdown", {})) }), this.build.isTextarea() ? (this.$box.after(this.$element), this.$box.remove(), this.$element.val(e).show()) : (this.$box.after(this.$editor), this.$box.remove(), this.$element.html(e).show()), this.$pasteBox && this.$pasteBox.remove(), this.$modalBox && this.$modalBox.remove(), this.$modalOverlay && this.$modalOverlay.remove(), t(".redactor-toolbar-tooltip-" + this.uuid).remove(), clearInterval(this.autosaveInterval) } } }, dropdown: function () { return { build: function (e, a, o) { "formatting" == e && this.opts.formattingAdd && t.each(this.opts.formattingAdd, t.proxy(function (e, t) { var a, r = t.tag; "undefined" != typeof t["class"] && (r = r + "-" + t["class"]), t.type = this.utils.isBlockTag(t.tag) ? "block" : "inline", a = "undefined" == typeof t.func ? "inline" == t.type ? "inline.formatting" : "block.formatting" : t.func; this.opts.linebreaks && "block" == t.type && "p" == t.tag || (this.formatting[r] = { tag: t.tag, style: t.style, class: t["class"], attr: t.attr, data: t.data, clear: t.clear }, o[r] = { func: a, title: t.title }) }, this)), t.each(o, t.proxy(function (o, r) { var l = t("<a href=\"#\" class=\"redactor-dropdown-" + o + "\" role=\"button\">" + r.title + "</a>"); "formatting" == e && l.addClass("redactor-formatting-" + o), l.on("click", t.proxy(function (a) { a.preventDefault(); var e = "func", l = r.func; r.command ? (e = "command", l = r.command) : r.dropdown && (e = "dropdown", l = r.dropdown); t(a.target).hasClass("redactor-dropdown-link-inactive") || (this.button.onClick(a, o, e, l), this.dropdown.hideAll()) }, this)), this.observe.addDropdown(l, o, r), a.append(l) }, this)) }, show: function (a, e) { if (!this.opts.visual) return a.preventDefault(), !1; var o = this.button.get(e), r = o.data("dropdown").appendTo(document.body); if (this.opts.highContrast && r.addClass("redactor-dropdown-contrast"), o.hasClass("dropact")) this.dropdown.hideAll(); else { this.dropdown.hideAll(), this.observe.dropdowns(), this.core.setCallback("dropdownShow", { dropdown: r, key: e, button: o }), this.button.setActive(e), o.addClass("dropact"); var l = o.offset(), n = r.width(); l.left + n > t(document).width() && (l.left = Math.max(0, l.left - n)); var i = l.left + "px"; if (this.$toolbar.hasClass("toolbar-fixed-box")) { var s = this.$toolbar.innerHeight() + this.opts.toolbarFixedTopOffset, d = "fixed"; this.opts.toolbarFixedTarget !== document && (s = this.$toolbar.innerHeight() + this.$toolbar.offset().top + this.opts.toolbarFixedTopOffset, d = "absolute"), r.css({ position: d, left: i, top: s + "px" }).show() } else { var s = o.innerHeight() + l.top + "px"; r.css({ position: "absolute", left: i, top: s }).show() } this.core.setCallback("dropdownShown", { dropdown: r, key: e, button: o }), this.$dropdown = r } t(document).one("click.redactor-dropdown", t.proxy(this.dropdown.hide, this)), this.$editor.one("click.redactor-dropdown", t.proxy(this.dropdown.hide, this)), t(document).one("keyup.redactor-dropdown", t.proxy(this.dropdown.closeHandler, this)), r.on("mouseover.redactor-dropdown", t.proxy(this.utils.disableBodyScroll, this)).on("mouseout.redactor-dropdown", t.proxy(this.utils.enableBodyScroll, this)), a.stopPropagation() }, closeHandler: function (t) { t.which != this.keyCode.ESC || (this.dropdown.hideAll(), this.$editor.focus()) }, hideAll: function () { this.$toolbar.find("a.dropact").removeClass("redactor-act").removeClass("dropact"), this.utils.enableBodyScroll(), t(".redactor-dropdown-" + this.uuid).hide(), t(".redactor-dropdown-link-selected").removeClass("redactor-dropdown-link-selected"), this.$dropdown && (this.$dropdown.off(".redactor-dropdown"), this.core.setCallback("dropdownHide", this.$dropdown), this.$dropdown = !1) }, hide: function (a) { var e = t(a.target); e.hasClass("dropact") || e.hasClass("redactor-dropdown-link-inactive") || (e.hasClass("redactor-dropdown") && (e.removeClass("dropact"), e.off("mouseover mouseout")), this.dropdown.hideAll()) } } }, file: function () { return { show: function () { this.modal.load("file", this.lang.get("file"), 700), this.upload.init("#redactor-modal-file-upload", this.opts.fileUpload, this.file.insert), this.selection.save(), this.selection.get(); var e = this.sel.toString(); t("#redactor-filename").val(e), this.modal.show() }, insert: function (a, o, r) { if ("undefined" != typeof a.error) return this.modal.close(), this.selection.restore(), void this.core.setCallback("fileUploadError", a); var e; if ("string" == typeof a) e = a; else { var l = t("#redactor-filename").val(); ("undefined" == typeof l || "" === l) && (l = a.filename), e = "<a href=\"" + a.filelink + "\" id=\"filelink-marker\">" + l + "</a>" } if (o) { this.selection.removeMarkers(); var n = this.selection.getMarker(); this.insert.nodeToCaretPositionFromPoint(r, n) } else this.modal.close(); if (this.selection.restore(), this.buffer.set(), this.insert.htmlWithoutClean(e), "string" != typeof a) { var i = t(this.$editor.find("a#filelink-marker")); 0 === i.length ? i = !1 : i.removeAttr("id").removeAttr("style"), this.core.setCallback("fileUpload", i, a) } } } }, focus: function () { return { setStart: function () { this.$editor.focus(); var e = this.$editor.children().first(); if (0 !== e.length && 0 !== e[0].length && "BR" != e[0].tagName && 3 != e[0].nodeType) { if ("UL" == e[0].tagName || "OL" == e[0].tagName) { var t = e.find("li").first(); if (!this.utils.isBlock(t) && "" === t.text()) return void this.caret.setStart(t) } return this.opts.linebreaks && !this.utils.isBlockTag(e[0].tagName) ? (this.selection.get(), this.range.setStart(this.$editor[0], 0), this.range.setEnd(this.$editor[0], 0), void this.selection.addRange()) : void this.caret.setStart(e) } }, setEnd: function () { var e = this.$editor.children().last(); this.$editor.focus(); 0 === e.length || (this.utils.isEmpty(this.$editor.html()) ? (this.selection.get(), this.range.collapse(!0), this.range.setStartAfter(e[0]), this.range.setEnd(e[0], 0), this.selection.addRange()) : (this.selection.get(), this.range.selectNodeContents(e[0]), this.range.collapse(!1), this.selection.addRange())) }, isFocused: function () { return this.$editor[0] === document.activeElement } } }, image: function () { return { show: function () { this.modal.load("image", this.lang.get("image"), 700), this.upload.init("#redactor-modal-image-droparea", this.opts.imageUpload, this.image.insert), this.selection.save(), this.modal.show() }, showEdit: function (e) { var a = e.closest("a", this.$editor[0]); if (this.modal.load("imageEdit", this.lang.get("edit"), 705), this.modal.createCancelButton(), this.image.buttonDelete = this.modal.createDeleteButton(this.lang.get("_delete")), this.image.buttonSave = this.modal.createActionButton(this.lang.get("save")), this.image.buttonDelete.on("click", t.proxy(function () { this.image.remove(e) }, this)), this.image.buttonSave.on("click", t.proxy(function () { this.image.update(e) }, this)), t(".redactor-link-tooltip").remove(), t("#redactor-image-title").val(e.attr("alt")), !this.opts.imageLink) t(".redactor-image-link-option").hide(); else { var o = t("#redactor-image-link"); o.attr("href", e.attr("src")), 0 !== a.length && (o.val(a.attr("href")), "_blank" == a.attr("target") && t("#redactor-image-link-blank").prop("checked", !0)) } if (!this.opts.imagePosition) t(".redactor-image-position-option").hide(); else { var r = "block" == e.css("display") && "none" == e.css("float") ? "center" : e.css("float"); t("#redactor-image-align").val(r) } this.modal.show(), t("#redactor-image-title").focus() }, setFloating: function (e) { var a = t("#redactor-image-align").val(), o = "", r = "", l = ""; "left" === a ? (o = "left", l = "0 " + this.opts.imageFloatMargin + " " + this.opts.imageFloatMargin + " 0") : "right" === a ? (o = "right", l = "0 0 " + this.opts.imageFloatMargin + " " + this.opts.imageFloatMargin) : "center" === a ? (r = "block", l = "auto") : void 0; e.css({ float: o, display: r, margin: l }), e.attr("rel", e.attr("style")) }, update: function (e) { this.image.hideResize(), this.buffer.set(); var o = e.closest("a", this.$editor[0]), r = t("#redactor-image-title").val().replace(/(<([^>]+)>)/ig, ""); e.attr("alt", r), this.image.setFloating(e); var l = t.trim(t("#redactor-image-link").val()), l = l.replace(/(<([^>]+)>)/ig, ""); if ("" !== l) { var n = /^(http|ftp|https):\/\/((xn--)?[a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}/i, i = /^((xn--)?[a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}/i; -1 == l.search(n) && 0 === l.search(i) && this.opts.linkProtocol && (l = this.opts.linkProtocol + "://" + l); var s = !!t("#redactor-image-link-blank").prop("checked"); if (0 === o.length) { var d = t("<a href=\"" + l + "\">" + this.utils.getOuterHtml(e) + "</a>"); s && d.attr("target", "_blank"), e.replaceWith(d) } else o.attr("href", l), s ? o.attr("target", "_blank") : o.removeAttr("target") } else 0 !== o.length && o.replaceWith(this.utils.getOuterHtml(e)); this.modal.close(), this.observe.images(), this.code.sync() }, setEditable: function (a) { this.opts.imageEditable && a.on("dragstart", t.proxy(this.image.onDrag, this)); var o = t.proxy(function () { this.observe.image = a, this.image.resizer = this.image.loadEditableControls(a), t(document).on("mousedown.redactor-image-resize-hide." + this.uuid, t.proxy(this.image.hideResize, this)); this.opts.imageResizable && this.image.resizer.on("mousedown.redactor touchstart.redactor", t.proxy(function (t) { this.image.setResizable(t, a) }, this)) }, this); a.off("mousedown.redactor").on("mousedown.redactor", t.proxy(this.image.hideResize, this)), a.off("click.redactor touchstart.redactor").on("click.redactor touchstart.redactor", o) }, setResizable: function (t, a) { t.preventDefault(), this.image.resizeHandle = { x: t.pageX, y: t.pageY, el: a, ratio: a.width() / a.height(), h: a.height() }, t = t.originalEvent || t, t.targetTouches && (this.image.resizeHandle.x = t.targetTouches[0].pageX, this.image.resizeHandle.y = t.targetTouches[0].pageY), this.image.startResize() }, startResize: function () { t(document).on("mousemove.redactor-image-resize touchmove.redactor-image-resize", t.proxy(this.image.moveResize, this)), t(document).on("mouseup.redactor-image-resize touchend.redactor-image-resize", t.proxy(this.image.stopResize, this)) }, moveResize: function (t) { t.preventDefault(), t = t.originalEvent || t; var a = this.image.resizeHandle.h; a += t.targetTouches ? t.targetTouches[0].pageY - this.image.resizeHandle.y : t.pageY - this.image.resizeHandle.y; var o = Math.round(a * this.image.resizeHandle.ratio); if (!(50 > a || 100 > o)) { var a = Math.round(this.image.resizeHandle.el.width() / this.image.resizeHandle.ratio); this.image.resizeHandle.el.attr({ width: o, height: a }), this.image.resizeHandle.el.width(o), this.image.resizeHandle.el.height(a), this.code.sync() } }, stopResize: function () { this.handle = !1, t(document).off(".redactor-image-resize"), this.image.hideResize() }, onDrag: function (a) { return 0 === this.$editor.find("#redactor-image-box").length ? void this.$editor.on("drop.redactor-image-inside-drop", t.proxy(function () { setTimeout(t.proxy(this.image.onDrop, this), 1) }, this)) : (a.preventDefault(), !1) }, onDrop: function () { this.image.fixImageSourceAfterDrop(), this.observe.images(), this.$editor.off("drop.redactor-image-inside-drop"), this.clean.clearUnverified(), this.code.sync() }, fixImageSourceAfterDrop: function () { this.$editor.find("img[data-save-url]").each(function () { var e = t(this); e.attr("src", e.attr("data-save-url")), e.removeAttr("data-save-url") }) }, hideResize: function (a) { if (!(a && 0 !== t(a.target).closest("#redactor-image-box", this.$editor[0]).length)) { if (a && "IMG" == a.target.tagName) { var e = t(a.target); e.attr("data-save-url", e.attr("src")) } var o = this.$editor.find("#redactor-image-box"); 0 === o.length || (t("#redactor-image-editter").remove(), t("#redactor-image-resizer").remove(), o.find("img").css({ marginTop: o[0].style.marginTop, marginBottom: o[0].style.marginBottom, marginLeft: o[0].style.marginLeft, marginRight: o[0].style.marginRight }), o.css("margin", ""), o.find("img").css("opacity", ""), o.replaceWith(function () { return t(this).contents() }), t(document).off("mousedown.redactor-image-resize-hide." + this.uuid), "undefined" != typeof this.image.resizeHandle && this.image.resizeHandle.el.attr("rel", this.image.resizeHandle.el.attr("style")), this.code.sync()) } }, loadResizableControls: function (e, a) { if (this.opts.imageResizable && !this.utils.isMobile()) { var o = t("<span id=\"redactor-image-resizer\" data-redactor=\"verified\"></span>"); return this.utils.isDesktop() || o.css({ width: "15px", height: "15px" }), o.attr("contenteditable", !1), a.append(o), a.append(e), o } return a.append(e), !1 }, loadEditableControls: function (e) { var a = t("<span id=\"redactor-image-box\" data-redactor=\"verified\">"); if (a.css("float", e.css("float")).attr("contenteditable", !1), "auto" == e[0].style.margin ? a.css({ display: "block", margin: "auto" }) : (a.css({ marginTop: e[0].style.marginTop, marginBottom: e[0].style.marginBottom, marginLeft: e[0].style.marginLeft, marginRight: e[0].style.marginRight }), e.css("margin", "")), e.css("opacity", ".5").after(a), this.opts.imageEditable) { this.image.editter = t("<span id=\"redactor-image-editter\" data-redactor=\"verified\">" + this.lang.get("edit") + "</span>"), this.image.editter.attr("contenteditable", !1), this.image.editter.on("click", t.proxy(function () { this.image.showEdit(e) }, this)), a.append(this.image.editter); var o = this.image.editter.innerWidth(); this.image.editter.css("margin-left", "-" + o / 2 + "px") } return this.image.loadResizableControls(e, a) }, remove: function (e) { var a = t(e), o = a.closest("a", this.$editor[0]), r = a.closest("figure", this.$editor[0]), l = a.parent(); 0 !== t("#redactor-image-box").length && (l = t("#redactor-image-box").parent()); var n; 0 === r.length ? 0 === o.length ? a.remove() : (l = o.parent(), o.remove()) : (n = r.next(), r.remove()), t("#redactor-image-box").remove(), 0 === r.length ? this.caret.setStart(l) : this.caret.setStart(n), this.core.setCallback("imageDelete", a[0].src, a), this.modal.close(), this.code.sync() }, insert: function (a, o, r) { if ("undefined" != typeof a.error) return this.modal.close(), this.selection.restore(), void this.core.setCallback("imageUploadError", a); var e; "string" == typeof a ? e = t(a).attr("data-redactor-inserted-image", "true") : (e = t("<img>"), e.attr("src", a.filelink).attr("data-redactor-inserted-image", "true")); var l = e, n = this.utils.isCurrentOrParent("P"); if (n && (l = t("<blockquote />").append(e)), o) { this.selection.removeMarkers(); var i = this.selection.getMarker(); this.insert.nodeToCaretPositionFromPoint(r, i) } else this.modal.close(); this.selection.restore(), this.buffer.set(), this.insert.html(this.utils.getOuterHtml(l), !1); var s = this.$editor.find("img[data-redactor-inserted-image=true]").removeAttr("data-redactor-inserted-image"); n ? s.parent().contents().unwrap().wrap("<p />") : this.opts.linebreaks && (!this.utils.isEmpty(this.code.get()) && s.before("<br>"), s.after("<br>")), "string" == typeof a || this.core.setCallback("imageUpload", s, a) } } }, indent: function () { return { increase: function () { this.utils.browser("msie") || this.$editor.focus(), this.buffer.set(), this.selection.save(); var e = this.selection.getBlock(); e && "LI" == e.tagName ? this.indent.increaseLists() : !1 === e && this.opts.linebreaks ? this.indent.increaseText() : this.indent.increaseBlocks(), this.selection.restore(), this.code.sync() }, increaseLists: function () { document.execCommand("indent"), this.indent.fixEmptyIndent(), this.clean.normalizeLists(), this.clean.clearUnverified() }, increaseBlocks: function () { t.each(this.selection.getBlocks(), t.proxy(function (e, t) { if ("TD" !== t.tagName && "TH" !== t.tagName) { var a = this.utils.getAlignmentElement(t), o = this.utils.normalize(a.css("margin-left")) + this.opts.indentValue; a.css("margin-left", o + "px") } }, this)) }, increaseText: function () { var e = this.selection.wrap("div"); t(e).attr("data-tagblock", "redactor"), t(e).css("margin-left", this.opts.indentValue + "px") }, decrease: function () { this.buffer.set(), this.selection.save(); var e = this.selection.getBlock(); e && "LI" == e.tagName ? this.indent.decreaseLists() : this.indent.decreaseBlocks(), this.selection.restore(), this.code.sync() }, decreaseLists: function () { document.execCommand("outdent"); var e = this.selection.getCurrent(), a = t(e).closest("li", this.$editor[0]); this.indent.fixEmptyIndent(), this.opts.linebreaks || 0 !== a.length || (document.execCommand("formatblock", !1, "p"), this.$editor.find("ul, ol, blockquote, p").each(t.proxy(this.utils.removeEmpty, this))), this.clean.clearUnverified() }, decreaseBlocks: function () { t.each(this.selection.getBlocks(), t.proxy(function (e, t) { var a = this.utils.getAlignmentElement(t), o = this.utils.normalize(a.css("margin-left")) - this.opts.indentValue; 0 >= o ? this.opts.linebreaks && "undefined" != typeof a.data("tagblock") ? a.replaceWith(a.html() + "<br />") : (a.css("margin-left", ""), this.utils.removeEmptyAttr(a, "style")) : a.css("margin-left", o + "px") }, this)) }, fixEmptyIndent: function () { var e = this.selection.getBlock(); if (this.range.collapsed && e && "LI" == e.tagName && this.utils.isEmpty(t(e).text())) { var a = t(e); a.find("span").not(".redactor-selection-marker").contents().unwrap(), a.append("<br>") } } } }, inline: function () { return { formatting: function (e) { var t, a; "undefined" == typeof this.formatting[e].style ? "undefined" != typeof this.formatting[e]["class"] && (t = "class") : t = "style", t && (a = this.formatting[e][t]), this.inline.format(this.formatting[e].tag, t, a) }, format: function (e, a, o) { var r = this.selection.getCurrent(); if (!(r && "TR" === r.tagName) && !(this.utils.isCurrentOrParent("PRE") || this.utils.isCurrentOrParentHeader())) { for (var l = ["b", "bold", "i", "italic", "underline", "strikethrough", "deleted", "superscript", "subscript"], n = ["strong", "strong", "em", "em", "u", "del", "del", "sup", "sub"], s = 0; s < l.length; s++)e == l[s] && (e = n[s]); if (this.opts.allowedTags) { if (-1 == t.inArray(e, this.opts.allowedTags)) return; } else if (-1 !== t.inArray(e, this.opts.deniedTags)) return; this.inline.type = a || !1, this.inline.value = o || !1, this.buffer.set(), this.utils.browser("msie") || this.opts.linebreaks || this.$editor.focus(), this.selection.get(), this.range.collapsed ? this.inline.formatCollapsed(e) : this.inline.formatMultiple(e) } }, formatCollapsed: function (e) { var a = this.selection.getCurrent(), o = t(a).closest(e + "[data-redactor-tag=" + e + "]", this.$editor[0]); if (0 !== o.length && "style" != this.inline.type && "SPAN" != o[0].tagName) return void (this.utils.isEmpty(o.text()) ? (this.caret.setAfter(o[0]), o.remove(), this.code.sync()) : this.utils.isEndOfElement(o) && this.caret.setAfter(o[0])); var r = t("<" + e + ">").attr("data-verified", "redactor").attr("data-redactor-tag", e); r.html(this.opts.invisibleSpace), r = this.inline.setFormat(r); var r = this.insert.node(r); this.caret.setEnd(r), this.code.sync() }, formatMultiple: function (e) { if (this.inline.formatConvert(e), this.selection.save(), document.execCommand("strikethrough"), this.$editor.find("strike").each(t.proxy(function (a, o) { var r = t(o); this.inline.formatRemoveSameChildren(r, e); var l; this.inline.type ? (l = t("<span>").attr("data-redactor-tag", e).attr("data-verified", "redactor"), l = this.inline.setFormat(l)) : l = t("<" + e + ">").attr("data-redactor-tag", e).attr("data-verified", "redactor"), r.replaceWith(l.html(r.contents())); var n = l.parent(); if ("A" === l[0].tagName && n && "U" === n[0].tagName && l.parent().replaceWith(l), "span" == e && n && "SPAN" === n[0].tagName && "style" === this.inline.type) for (var i = this.inline.value.split(";"), s = 0; s < i.length; s++) { if ("" === i[s]) return; var d = i[s].split(":"); n.css(d[0], ""), this.utils.removeEmptyAttr(n, "style") && n.replaceWith(n.contents()) } }, this)), "span" != e && this.$editor.find(this.opts.inlineTags.join(", ")).each(t.proxy(function (e, a) { var o = t(a); if ("U" === a.tagName && 0 === a.attributes.length) return void o.replaceWith(o.contents()); var r = o.css("text-decoration"); "line-through" === r && (o.css("text-decoration", ""), this.utils.removeEmptyAttr(o, "style")) }, this)), "del" != e) { var a = this; this.$editor.find("inline").each(function (e, t) { a.utils.replaceToTag(t, "del") }) } if ("u" != e) { var a = this; this.$editor.find("unline").each(function (e, t) { a.utils.replaceToTag(t, "u") }) } this.selection.restore(), this.code.sync() }, formatRemoveSameChildren: function (e, a) { var o = this; e.children(a).each(function () { var e = t(this); if (!e.hasClass("redactor-selection-marker")) if ("style" == o.inline.type) for (var a = o.inline.value.split(";"), r = 0; r < a.length; r++) { if ("" === a[r]) return; var l = a[r].split(":"); e.css(l[0], ""), o.utils.removeEmptyAttr(e, "style") && e.replaceWith(e.contents()) } else e.contents().unwrap() }) }, formatConvert: function (e) { this.selection.save(); var a = ""; "class" == this.inline.type ? a = "[data-redactor-class=" + this.inline.value + "]" : "style" == this.inline.type && (a = "[data-redactor-style=\"" + this.inline.value + "\"]"); var o = this; "del" != e && this.$editor.find("del").each(function (e, t) { o.utils.replaceToTag(t, "inline") }), "u" != e && this.$editor.find("u").each(function (e, t) { o.utils.replaceToTag(t, "unline") }), "span" != e && this.$editor.find(e).each(function () { var e = t(this); e.replaceWith(t("<strike />").html(e.contents())) }), this.$editor.find("[data-redactor-tag=\"" + e + "\"]" + a).each(function () { if ("" !== a || "span" != e || this.tagName.toLowerCase() != e) { var o = t(this); o.replaceWith(t("<strike />").html(o.contents())) } }), this.selection.restore() }, setFormat: function (e) { switch (this.inline.type) { case "class": e.hasClass(this.inline.value) ? (e.removeClass(this.inline.value), e.removeAttr("data-redactor-class")) : (e.addClass(this.inline.value), e.attr("data-redactor-class", this.inline.value)); break; case "style": e[0].style.cssText = this.inline.value, e.attr("data-redactor-style", this.inline.value); }return e }, removeStyle: function () { this.buffer.set(); var e = this.selection.getCurrent(), a = this.selection.getInlines(); if (this.selection.save(), e && "SPAN" === e.tagName) { var o = t(e); o.removeAttr("style"), 0 === o[0].attributes.length && o.replaceWith(o.contents()) } t.each(a, t.proxy(function (e, a) { var o = t(a); -1 == t.inArray(a.tagName.toLowerCase(), this.opts.inlineTags) || o.hasClass("redactor-selection-marker") || (o.removeAttr("style"), 0 === o[0].attributes.length && o.replaceWith(o.contents())) }, this)), this.selection.restore(), this.code.sync() }, removeStyleRule: function (e) { this.buffer.set(); var a = this.selection.getParent(), o = this.selection.getInlines(); if (this.selection.save(), a && "SPAN" === a.tagName) { var r = t(a); r.css(e, ""), this.utils.removeEmptyAttr(r, "style"), 0 === r[0].attributes.length && r.replaceWith(r.contents()) } t.each(o, t.proxy(function (a, o) { var r = t(o); -1 == t.inArray(o.tagName.toLowerCase(), this.opts.inlineTags) || r.hasClass("redactor-selection-marker") || (r.css(e, ""), this.utils.removeEmptyAttr(r, "style"), 0 === r[0].attributes.length && r.replaceWith(r.contents())) }, this)), this.selection.restore(), this.code.sync() }, removeFormat: function () { this.buffer.set(); var e = this.selection.getCurrent(); this.selection.save(), document.execCommand("removeFormat"), e && "SPAN" === e.tagName && t(e).replaceWith(t(e).contents()), t.each(this.selection.getNodes(), t.proxy(function (e, a) { var o = t(a); -1 == t.inArray(a.tagName.toLowerCase(), this.opts.inlineTags) || o.hasClass("redactor-selection-marker") || o.replaceWith(o.contents()) }, this)), this.selection.restore(), this.code.sync() }, toggleClass: function (e) { this.inline.format("span", "class", e) }, toggleStyle: function (e) { this.inline.format("span", "style", e) } } }, insert: function () { return { set: function (e, a) { this.placeholder.remove(), e = this.clean.setVerified(e), "undefined" == typeof a && (e = this.clean.onPaste(e, !1)), this.$editor.html(e), this.selection.remove(), this.focus.setEnd(), this.clean.normalizeLists(), this.code.sync(), this.observe.load(), "undefined" == typeof a && setTimeout(t.proxy(this.clean.clearUnverified, this), 10) }, text: function (e) { if (this.placeholder.remove(), e = e.toString(), e = t.trim(e), e = this.clean.getPlainText(e, !1), this.$editor.focus(), this.utils.browser("msie")) this.insert.htmlIe(e); else { this.selection.get(), this.range.deleteContents(); var a = document.createElement("div"); a.innerHTML = e; for (var o, r, l = document.createDocumentFragment(); o = a.firstChild;)r = l.appendChild(o); if (this.range.insertNode(l), r) { var n = this.range.cloneRange(); n.setStartAfter(r), n.collapse(!0), this.sel.removeAllRanges(), this.sel.addRange(n) } } this.code.sync(), this.clean.clearUnverified() }, htmlWithoutClean: function (e) { this.insert.html(e, !1) }, html: function (e, a) { this.placeholder.remove(), "undefined" == typeof a && (a = !0), this.opts.linebreaks || this.$editor.focus(), e = this.clean.setVerified(e), a && (e = this.clean.onPaste(e)), this.utils.browser("msie") ? this.insert.htmlIe(e) : (this.clean.singleLine ? this.insert.execHtml(e) : document.execCommand("insertHTML", !1, e), this.insert.htmlFixMozilla()), this.clean.normalizeLists(), this.opts.linebreaks || this.$editor.find("p").each(t.proxy(this.utils.removeEmpty, this)), this.code.sync(), this.observe.load(), a && this.clean.clearUnverified() }, htmlFixMozilla: function () { if (this.utils.browser("mozilla")) { var e = t(this.selection.getBlock()).next(); 0 < e.length && "P" == e[0].tagName && "" === e.html() && e.remove() } }, htmlIe: function (e) { if (this.utils.isIe11()) { var a = this.utils.isCurrentOrParent("P"), o = t("<div>").append(e), r = o.contents().is("p, :header, dl, ul, ol, div, table, td, blockquote, pre, address, section, header, footer, aside, article"); return void (a && r ? this.insert.ie11FixInserting(a, e) : this.insert.ie11PasteFrag(e)) } document.selection.createRange().pasteHTML(e) }, execHtml: function (e) { e = this.clean.setVerified(e), this.selection.get(), this.range.deleteContents(); var t = document.createElement("div"); t.innerHTML = e; for (var a, o, r = document.createDocumentFragment(); a = t.firstChild;)o = r.appendChild(a); this.range.insertNode(r), this.range.collapse(!0), this.caret.setAfter(o) }, node: function (e, a) { e = e[0] || e; var o = this.caret.getOffset(), r = this.utils.getOuterHtml(e); return r = this.clean.setVerified(r), null !== r.match(/</g) && (e = t(r)[0]), this.selection.get(), !1 !== a && this.range.deleteContents(), this.range.insertNode(e), this.range.collapse(!1), this.selection.addRange(), this.caret.setOffset(o), e }, nodeToPoint: function (e, t, a) { e = e[0] || e, this.selection.get(); var o; if (document.caretPositionFromPoint) { var r = document.caretPositionFromPoint(t, a); this.range.setStart(r.offsetNode, r.offset), this.range.collapse(!0), this.range.insertNode(e) } else if (document.caretRangeFromPoint) o = document.caretRangeFromPoint(t, a), o.insertNode(e); else if ("undefined" != typeof document.body.createTextRange) { o = document.body.createTextRange(), o.moveToPoint(t, a); var l = o.duplicate(); l.moveToPoint(t, a), o.setEndPoint("EndToEnd", l), o.select() } }, nodeToCaretPositionFromPoint: function (t, e) { e = e[0] || e; var a, o = t.clientX, r = t.clientY; if (document.caretPositionFromPoint) { var l = document.caretPositionFromPoint(o, r), n = document.getSelection(); a = n.getRangeAt(0), a.setStart(l.offsetNode, l.offset), a.collapse(!0), a.insertNode(e) } else if (document.caretRangeFromPoint) a = document.caretRangeFromPoint(o, r), a.insertNode(e); else if ("undefined" != typeof document.body.createTextRange) { a = document.body.createTextRange(), a.moveToPoint(o, r); var i = a.duplicate(); i.moveToPoint(o, r), a.setEndPoint("EndToEnd", i), a.select() } }, ie11FixInserting: function (e, a) { var o = document.createElement("span"); o.className = "redactor-ie-paste", this.insert.node(o); var r = t(e).html(); r = "<p>" + r.replace(/<span class="redactor-ie-paste"><\/span>/gi, "</p>" + a + "<p>") + "</p>", r = r.replace(/<p><\/p>/gi, ""), t(e).replaceWith(r) }, ie11PasteFrag: function (e) { this.selection.get(), this.range.deleteContents(); var t = document.createElement("div"); t.innerHTML = e; for (var a, o = document.createDocumentFragment(); a = t.firstChild;)o.appendChild(a); this.range.insertNode(o), this.range.collapse(!1), this.selection.addRange() } } }, keydown: function () { return { init: function (a) { if (!this.rtePaste) { var e = a.which, o = 37 <= e && 40 >= e; this.keydown.ctrl = a.ctrlKey || a.metaKey, this.keydown.current = this.selection.getCurrent(), this.keydown.parent = this.selection.getParent(), this.keydown.block = this.selection.getBlock(), this.keydown.pre = this.utils.isTag(this.keydown.current, "pre"), this.keydown.blockquote = this.utils.isTag(this.keydown.current, "blockquote"), this.keydown.figcaption = this.utils.isTag(this.keydown.current, "figcaption"), this.shortcuts.init(a, e), this.utils.isDesktop() && (this.keydown.checkEvents(o, e), this.keydown.setupBuffer(a, e)), this.keydown.addArrowsEvent(o), this.keydown.setupSelectAll(a, e); var r = this.core.setCallback("keydown", a); if (!1 === r) return a.preventDefault(), !1; if (this.opts.enterKey && (this.utils.browser("msie") || this.utils.browser("mozilla")) && (e === this.keyCode.DOWN || e === this.keyCode.RIGHT)) { var l = !1, n = !1; if (this.keydown.block && "TD" === this.keydown.block.tagName && (n = t(this.keydown.block).closest("table", this.$editor[0])), n && n.find("td").last()[0] === this.keydown.block && (l = !0), this.utils.isEndOfElement() && l) { var s = t(this.opts.emptyHtml); n.after(s), this.caret.setStart(s) } } if (this.opts.enterKey && e === this.keyCode.DOWN && this.keydown.onArrowDown(), !this.opts.enterKey && e === this.keyCode.ENTER) return a.preventDefault(), void (this.range.collapsed || this.range.deleteContents()); if (e == this.keyCode.ENTER && !a.shiftKey && !a.ctrlKey && !a.metaKey) { var d = this.core.setCallback("enter", a); if (!1 === d) return a.preventDefault(), !1; if (this.keydown.blockquote && !0 === this.keydown.exitFromBlockquote(a)) return !1; var c, p; if (this.keydown.pre) return this.keydown.insertNewLine(a); if (this.keydown.blockquote || this.keydown.figcaption) return c = this.selection.getCurrent(), p = t(c).next(), 0 !== p.length && "BR" == p[0].tagName ? this.keydown.insertBreakLine(a) : this.utils.isEndOfElement() && c && "SPAN" != c ? this.keydown.insertDblBreakLine(a) : this.keydown.insertBreakLine(a); if (this.opts.linebreaks && !this.keydown.block) return c = this.selection.getCurrent(), p = t(this.keydown.current).next(), 0 !== p.length && "BR" == p[0].tagName ? this.keydown.insertBreakLine(a) : !1 !== c && t(c).hasClass("redactor-invisible-space") ? (this.caret.setAfter(c), t(c).contents().unwrap(), this.keydown.insertDblBreakLine(a)) : this.utils.isEndOfEditor() ? this.keydown.insertDblBreakLine(a) : 0 === p.length && !1 === c && "undefined" != typeof p.context ? this.keydown.insertBreakLine(a) : this.keydown.insertBreakLine(a); if (this.opts.linebreaks && this.keydown.block) setTimeout(t.proxy(this.keydown.replaceDivToBreakLine, this), 1); else if (!this.opts.linebreaks && this.keydown.block) { if (setTimeout(t.proxy(this.keydown.replaceDivToParagraph, this), 1), "LI" === this.keydown.block.tagName) { c = this.selection.getCurrent(); var u = t(c).closest("li", this.$editor[0]), m = u.closest("ul,ol", this.$editor[0]); if (0 !== u.length && this.utils.isEmpty(u.html()) && 0 === m.next().length && this.utils.isEmpty(m.find("li").last().html())) { m.find("li").last().remove(); var s = t(this.opts.emptyHtml); return m.after(s), this.caret.setStart(s), !1 } } } else if (!this.opts.linebreaks && !this.keydown.block) return this.keydown.insertParagraph(a) } if (e === this.keyCode.ENTER && (a.ctrlKey || a.shiftKey)) return this.keydown.onShiftEnter(a); if (e === this.keyCode.TAB || a.metaKey && 221 === e || a.metaKey && 219 === e) return this.keydown.onTab(a, e); if (e === this.keyCode.BACKSPACE || e === this.keyCode.DELETE) { var g = this.selection.getNodes(); if (g) for (var f, b, h = g.length, k = 0; k < h; k++)if (b = t(g[k]).children("img"), 0 !== b.length) { var v = this; t.each(b, function (e, a) { var o = t(a); "none" != o.css("float") || (v.core.setCallback("imageDelete", a.src, o), f = a) }) } else "IMG" == g[k].tagName && f != g[k] && (this.core.setCallback("imageDelete", g[k].src, t(g[k])), f = g[k]) } if (e === this.keyCode.BACKSPACE) { var y = this.selection.getBlock(), x = "0px" !== t(y).css("margin-left"); if (y && x && this.range.collapsed && this.utils.isStartOfElement()) return this.indent.decrease(), void a.preventDefault(); if (this.utils.browser("mozilla")) { var C = this.selection.getPrev(), w = t(C).prev()[0]; C && "HR" === C.tagName && t(C).remove(), w && "HR" === w.tagName && t(w).remove() } this.keydown.removeInvisibleSpace(), this.keydown.removeEmptyListInTable(a) } this.code.sync() } }, checkEvents: function (e, t) { e || "click" != this.core.getEvent() && "arrow" != this.core.getEvent() || (this.core.addEvent(!1), this.keydown.checkKeyEvents(t) && this.buffer.set()) }, checkKeyEvents: function (e) { var a = this.keyCode, o = [a.BACKSPACE, a.DELETE, a.ENTER, a.ESC, a.TAB, a.CTRL, a.META, a.ALT, a.SHIFT]; return !(-1 != t.inArray(e, o)) }, addArrowsEvent: function (e) { return e ? "click" == this.core.getEvent() || "arrow" == this.core.getEvent() ? void this.core.addEvent(!1) : void this.core.addEvent("arrow") : void 0 }, setupBuffer: function (t, e) { return this.keydown.ctrl && 90 === e && !t.shiftKey && !t.altKey && this.opts.buffer.length ? (t.preventDefault(), void this.buffer.undo()) : this.keydown.ctrl && 90 === e && t.shiftKey && !t.altKey && 0 !== this.opts.rebuffer.length ? (t.preventDefault(), void this.buffer.redo()) : void (this.keydown.ctrl || e != this.keyCode.BACKSPACE && e != this.keyCode.DELETE && (e != this.keyCode.ENTER || t.ctrlKey || t.shiftKey) || this.buffer.set()) }, setupSelectAll: function (t, e) { this.keydown.ctrl && 65 === e ? this.utils.enableSelectAll() : e != this.keyCode.LEFT_WIN && !this.keydown.ctrl && this.utils.disableSelectAll() }, onArrowDown: function () { for (var e = [this.keydown.blockquote, this.keydown.pre, this.keydown.figcaption], t = 0; t < e.length; t++)if (e[t]) return this.keydown.insertAfterLastElement(e[t]), !1 }, onShiftEnter: function (t) { return this.buffer.set(), this.utils.isEndOfElement() ? this.keydown.insertDblBreakLine(t) : this.keydown.insertBreakLine(t) }, onTab: function (t, e) { if (!this.opts.tabKey) return !0; if (this.utils.isEmpty(this.code.get()) && !1 === this.opts.tabAsSpaces) return !0; t.preventDefault(); var a; return this.keydown.pre && !t.shiftKey ? (a = this.opts.preSpaces ? document.createTextNode(Array(this.opts.preSpaces + 1).join("\xA0")) : document.createTextNode("\t"), this.insert.node(a), this.code.sync()) : !1 === this.opts.tabAsSpaces ? t.metaKey && 219 === e ? this.indent.decrease() : t.metaKey && 221 === e ? this.indent.increase() : t.shiftKey ? this.indent.decrease() : this.indent.increase() : (a = document.createTextNode(Array(this.opts.tabAsSpaces + 1).join("\xA0")), this.insert.node(a), this.code.sync()), !1 }, replaceDivToBreakLine: function () { var e = this.selection.getBlock(), a = e.innerHTML.replace(/<br\s?\/?>/gi, ""); if (("DIV" === e.tagName || "P" === e.tagName) && "" === a && !t(e).hasClass("redactor-editor")) { var o = document.createElement("br"); return t(e).replaceWith(o), this.caret.setBefore(o), this.code.sync(), !1 } }, replaceDivToParagraph: function () { var e = this.selection.getBlock(), a = e.innerHTML.replace(/<br\s?\/?>/gi, ""); if ("DIV" === e.tagName && this.utils.isEmpty(a) && !t(e).hasClass("redactor-editor")) { var o = document.createElement("p"); return o.innerHTML = this.opts.invisibleSpace, t(e).replaceWith(o), this.caret.setStart(o), this.code.sync(), !1 } this.opts.cleanStyleOnEnter && "P" == e.tagName && t(e).removeAttr("class").removeAttr("style") }, insertParagraph: function (t) { t.preventDefault(), this.selection.get(); var e = document.createElement("p"); return e.innerHTML = this.opts.invisibleSpace, this.range.deleteContents(), this.range.insertNode(e), this.caret.setStart(e), this.code.sync(), !1 }, exitFromBlockquote: function (a) { if (this.utils.isEndOfElement()) { var e = t.trim(t(this.keydown.block).html()); if (-1 != e.search(/(<br\s?\/?>){2}$/i)) { if (a.preventDefault(), this.opts.linebreaks) { var o = document.createElement("br"); t(this.keydown.blockquote).after(o), this.caret.setBefore(o), t(this.keydown.block).html(e.replace(/<br\s?\/?>$/i, "")) } else { var r = t(this.opts.emptyHtml); t(this.keydown.blockquote).after(r), this.caret.setStart(r) } return !0 } } }, insertAfterLastElement: function (e) { if (this.utils.isEndOfElement()) if (this.buffer.set(), this.opts.linebreaks) { var a = t("<div>").append(t.trim(this.$editor.html())).contents(), o = a.last()[0]; if ("SPAN" == o.tagName && "" === o.innerHTML && (o = a.prev()[0]), this.utils.getOuterHtml(o) != this.utils.getOuterHtml(e)) return; var r = document.createElement("br"); t(e).after(r), this.caret.setAfter(r) } else { if (this.$editor.contents().last()[0] !== e) return; var l = t(this.opts.emptyHtml); t(e).after(l), this.caret.setStart(l) } }, insertNewLine: function (t) { t.preventDefault(); var e = document.createTextNode("\n"); return this.selection.get(), this.range.deleteContents(), this.range.insertNode(e), this.caret.setAfter(e), this.code.sync(), !1 }, insertBreakLine: function (t) { return this.keydown.insertBreakLineProcessing(t) }, insertDblBreakLine: function (t) { return this.keydown.insertBreakLineProcessing(t, !0) }, insertBreakLineProcessing: function (a, e) { a.stopPropagation(), this.selection.get(); var o = document.createElement("br"); this.utils.browser("msie") ? (this.range.collapse(!1), this.range.setEnd(this.range.endContainer, this.range.endOffset)) : this.range.deleteContents(), this.range.insertNode(o); var r = t(o).parent("a"); if (0 < r.length && (r.find(o).remove(), r.after(o)), !0 === e) { var l = t(o).next(); if (0 !== l.length && "BR" === l[0].tagName && this.utils.isEndOfEditor()) return this.caret.setAfter(o), this.code.sync(), !1; var n = document.createElement("br"); this.range.insertNode(n), this.caret.setAfter(n) } else if (this.utils.browser("msie")) { var i = document.createElement("span"); i.innerHTML = "&#x200b;", t(o).after(i), this.range.setStartAfter(i), this.range.setEndAfter(i), t(i).remove() } else { var s = document.createRange(); s.setStartAfter(o), s.collapse(!0); var d = window.getSelection(); d.removeAllRanges(), d.addRange(s) } return this.code.sync(), !1 }, removeInvisibleSpace: function () { var e = t(this.keydown.current); 0 === e.text().search(/^\u200B$/g) && e.remove() }, removeEmptyListInTable: function (a) { var e = t(this.keydown.current), o = t(this.keydown.parent), r = e.closest("td", this.$editor[0]); if (0 !== r.length && e.closest("li", this.$editor[0]) && 1 === o.children("li").length) { if (!this.utils.isEmpty(e.text())) return; a.preventDefault(), e.remove(), o.remove(), this.caret.setStart(r) } } } }, keyup: function () { return { init: function (a) { if (!this.rtePaste) { var e = a.which; this.keyup.current = this.selection.getCurrent(), this.keyup.parent = this.selection.getParent(); var o = this.utils.isRedactorParent(t(this.keyup.parent).parent()), r = this.core.setCallback("keyup", a); if (!1 === r) return a.preventDefault(), !1; if (!this.opts.linebreaks && 3 === this.keyup.current.nodeType && 1 >= this.keyup.current.length && (!1 === this.keyup.parent || "BODY" == this.keyup.parent.tagName) && this.keyup.replaceToParagraph(), !this.opts.linebreaks && this.utils.isRedactorParent(this.keyup.current) && "DIV" === this.keyup.current.tagName && this.keyup.replaceToParagraph(!1), !this.opts.linebreaks && t(this.keyup.parent).hasClass("redactor-invisible-space") && (!1 === o || "BODY" == o[0].tagName) && (t(this.keyup.parent).contents().unwrap(), this.keyup.replaceToParagraph()), this.linkify.isEnabled() && this.linkify.isKey(e) && this.linkify.format(), e === this.keyCode.DELETE || e === this.keyCode.BACKSPACE) { if (this.utils.browser("mozilla")) { var l = t(this.keydown.current).closest("td", this.$editor[0]); if (0 !== l.length && "" !== l.text()) return a.preventDefault(), !1 } return (this.clean.clearUnverified(), this.observe.image) ? (a.preventDefault(), this.image.hideResize(), this.buffer.set(), this.image.remove(this.observe.image), this.observe.image = !1, !1) : (this.$editor.find("p").each(t.proxy(function (e, a) { this.utils.removeEmpty(e, t(a).html()) }, this)), this.opts.linebreaks && this.keyup.current && "DIV" == this.keyup.current.tagName && this.utils.isEmpty(this.keyup.current.innerHTML) && (t(this.keyup.current).after(this.selection.getMarkerAsHtml()), this.selection.restore(), t(this.keyup.current).remove()), this.keyup.removeEmptyLists(), this.keyup.formatEmpty(a)) } } }, replaceToParagraph: function (e) { var a, o = t(this.keyup.current); a = !1 === e ? t("<p>").append(o.html()) : t("<p>").append(o.clone()), o.replaceWith(a); var r = t(a).next(); "undefined" != typeof r[0] && "BR" == r[0].tagName && r.remove(), this.caret.setEnd(a) }, removeEmptyLists: function () { var e = function () { var e = t.trim(this.innerHTML).replace(/\/t\/n/g, ""); "" === e && t(this).remove() }; this.$editor.find("li").each(e), this.$editor.find("ul, ol").each(e) }, formatEmpty: function (a) { var e = t.trim(this.$editor.html()); if (this.utils.isEmpty(e)) return a.preventDefault(), this.opts.linebreaks ? (this.$editor.html(this.selection.getMarkerAsHtml()), this.selection.restore()) : (this.$editor.html(this.opts.emptyHtml), this.focus.setStart()), this.code.sync(), !1 } } }, lang: function () { return { load: function () { this.opts.curLang = this.opts.langs[this.opts.lang] }, get: function (e) { return "undefined" == typeof this.opts.curLang[e] ? "" : this.opts.curLang[e] } } }, line: function () { return { insert: function () { this.buffer.set(); var e = this.selection.getBlocks(); return !1 !== e[0] && this.line.isExceptLastOrFirst(e) ? void (this.utils.browser("msie") || this.$editor.focus()) : void (this.utils.browser("msie") ? this.line.insertInIe() : this.line.insertInOthersBrowsers()) }, isExceptLastOrFirst: function (e) { var a = ["li", "td", "th", "blockquote", "figcaption", "pre", "dl", "dt", "dd"], o = e[0].tagName.toLowerCase(), r = this.selection.getLastBlock(); r = "undefined" == typeof r ? o : r.tagName.toLowerCase(); var l = -1 != t.inArray(o, a), n = -1 != t.inArray(r, a); if (l && n || l) return !0 }, insertInIe: function () { this.utils.saveScroll(), this.buffer.set(), this.insert.node(document.createElement("hr")), this.utils.restoreScroll(), this.code.sync() }, insertInOthersBrowsers: function () { this.buffer.set(); var e = "<p id=\"redactor-insert-line\"><br /></p>"; this.opts.linebreaks && (e = "<br id=\"redactor-insert-line\">"), document.execCommand("insertHtml", !1, "<hr>" + e), this.line.setFocus(), this.code.sync() }, setFocus: function () { var e = this.$editor.find("#redactor-insert-line"), a = t(e).next()[0], o = a; this.utils.browser("mozilla") && a && "" === a.innerHTML && (o = t(a).next()[0], t(a).remove()), o ? (e.remove(), !this.opts.linebreaks && (this.$editor.focus(), this.line.setStart(o))) : (e.removeAttr("id"), this.line.setStart(e[0])) }, setStart: function (e) { if ("undefined" != typeof e) { var t = document.createTextNode("\u200B"); this.selection.get(), this.range.setStart(e, 0), this.range.insertNode(t), this.range.collapse(!0), this.selection.addRange() } } } }, link: function () { return { show: function (a) { "undefined" != typeof a && a.preventDefault && a.preventDefault(), this.observe.isCurrent("a") ? this.modal.load("link", this.lang.get("link_edit"), 600) : this.modal.load("link", this.lang.get("link_insert"), 600), this.modal.createCancelButton(); var e = this.observe.isCurrent("a") ? this.lang.get("edit") : this.lang.get("insert"); this.link.buttonInsert = this.modal.createActionButton(e), this.selection.get(), this.link.getData(), this.link.cleanUrl(), "_blank" == this.link.target && t("#redactor-link-blank").prop("checked", !0), "nofollow" == this.link.follow && t("#redactor-link-follow").prop("checked", !0), this.link.$inputUrl = t("#redactor-link-url"), this.link.$inputText = t("#redactor-link-url-text"), this.link.$inputTitle = t("#redactor-link-url-title"), this.link.$inputText.val(this.link.text), this.link.$inputUrl.val(this.link.url), this.link.$inputTitle.val(this.link.title), this.link.buttonInsert.on("click", t.proxy(this.link.insert, this)), t(".redactor-link-tooltip").remove(), this.selection.save(), this.modal.show(), this.link.$inputUrl.focus() }, cleanUrl: function () { var e = self.location.href.replace(/\/$/i, ""); if ("undefined" != typeof this.link.url && (this.link.url = this.link.url.replace(e, ""), this.link.url = this.link.url.replace(/^\/#/, "#"), this.link.url = this.link.url.replace("mailto:", ""), !this.opts.linkProtocol)) { var t = new RegExp("^(http|ftp|https)://" + self.location.host, "i"); this.link.url = this.link.url.replace(t, "") } }, getData: function () { this.link.$node = !1; var e = t(this.selection.getCurrent()).closest("a", this.$editor[0]); 0 !== e.length && "A" === e[0].tagName ? (this.link.$node = e, this.link.url = e.attr("href"), this.link.text = e.text(), this.link.target = e.attr("target")) : (this.link.text = this.sel.toString(), this.link.url = "", this.link.target = "") }, insert: function () { this.placeholder.remove(); var e = "", a = this.link.$inputUrl.val(), o = this.link.$inputText.val().replace(/(<([^>]+)>)/ig, ""), r = this.link.$inputTitle.val(); if ("" === t.trim(a)) return void this.link.$inputUrl.addClass("redactor-input-error").on("keyup", function () { t(this).removeClass("redactor-input-error"), t(this).off("keyup") }); if (-1 != a.search("@") && !1 === /(http|ftp|https):\/\//i.test(a)) a = a.replace("mailto:", ""), a = "mailto:" + a; else if (0 !== a.search("#")) { t("#redactor-link-blank").prop("checked") && (e = "_blank"), t("#redactor-link-follow").prop("checked") && (follow = "nofollow"); var l = /^(http|ftp|https):\/\/((xn--)?[a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}/i, n = /^((xn--)?[a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}/i, i = /.(html|php)$/i; -1 == a.search(l) && -1 == a.search(i) && 0 === a.search(n) && this.opts.linkProtocol && (a = this.opts.linkProtocol + "://" + a) } this.link.set(o, a, e), this.modal.close() }, set: function (e, a, o) { e = t.trim(e.replace(/<|>/g, "")), this.selection.restore(); var r = this.selection.getBlocks(); if ("" !== e || "" !== a) { if ("" === e && "" !== a && (e = a), this.link.$node) { this.buffer.set(); var l = this.link.$node, n = l.children(); if (0 < n.length) { for (; n.length;)n = n.children(); n = n.end() } else n = l; l.attr("href", a), n.text(e), "" === o ? l.removeAttr("target") : l.attr("target", o), this.selection.selectElement(l), this.code.sync() } else { if (this.utils.browser("mozilla") && "" === this.link.text) { var i = t("<a />").attr("href", a).text(e); "" !== o && i.attr("target", o), i = t(this.insert.node(i)), this.opts.linebreaks && i.after("&nbsp;"), this.selection.selectElement(i) } else { var i; this.utils.browser("msie") ? (i = t("<a href=\"" + a + "\">").text(e), "" !== o && i.attr("target", o), i = t(this.insert.node(i)), this.selection.getText().match(/\s$/) && i.after(" "), this.selection.selectElement(i)) : (document.execCommand("createLink", !1, a), i = t(this.selection.getCurrent()).closest("a", this.$editor[0]), this.utils.browser("mozilla") && (i = t("a[_moz_dirty=\"\"]")), "" !== o && i.attr("target", o), i.removeAttr("style").removeAttr("_moz_dirty"), this.selection.getText().match(/\s$/) && i.after(" "), ("" !== this.link.text || this.link.text != e) && (!this.opts.linebreaks && r && 1 >= r.length ? i.text(e) : this.opts.linebreaks && i.text(e), this.selection.selectElement(i))) } this.code.sync(), this.core.setCallback("insertedLink", i) } setTimeout(t.proxy(function () { this.observe.links() }, this), 5) } }, unlink: function (a) { "undefined" != typeof a && a.preventDefault && a.preventDefault(); var e = this.selection.getNodes(); if (e) { this.buffer.set(); for (var o = e.length, r = [], l = 0; l < o; l++) { "A" === e[l].tagName && r.push(e[l]); var n = t(e[l]).closest("a", this.$editor[0]); n.replaceWith(n.contents()) } this.core.setCallback("deletedLink", r), t(".redactor-link-tooltip").remove(), this.code.sync() } }, toggleClass: function (e) { this.link.setClass(e, "toggleClass") }, addClass: function (e) { this.link.setClass(e, "addClass") }, removeClass: function (e) { this.link.setClass(e, "removeClass") }, setClass: function (e, a) { var o = this.selection.getInlinesTags(["a"]); !1 === o || t.each(o, function () { t(this)[a](e) }) } } }, linkify: function () { return { isKey: function (e) { return e == this.keyCode.ENTER || e == this.keyCode.SPACE }, isEnabled: function () { return this.opts.convertLinks && (this.opts.convertUrlLinks || this.opts.convertImageLinks || this.opts.convertVideoLinks) && !this.utils.isCurrentOrParent("PRE") }, format: function () { var e = this.linkify, a = this.opts; this.$editor.find(":not(iframe,img,a,pre)").addBack().contents().filter(function () { return 3 === this.nodeType && "" != t.trim(this.nodeValue) && !t(this).parent().is("pre") && (this.nodeValue.match(a.linkify.regexps.youtube) || this.nodeValue.match(a.linkify.regexps.vimeo) || this.nodeValue.match(a.linkify.regexps.image) || this.nodeValue.match(a.linkify.regexps.url)) }).each(function () { var o = t(this).text(), r = o; a.convertVideoLinks && (r.match(a.linkify.regexps.youtube) || r.match(a.linkify.regexps.vimeo)) ? r = e.convertVideoLinks(r) : a.convertImageLinks && r.match(a.linkify.regexps.image) ? r = e.convertImages(r) : a.convertUrlLinks && (r = e.convertLinks(r)), t(this).before(o.replace(o, r)).remove() }); var o = this.$editor.find(".redactor-linkify-object").each(function () { var e = t(this); return e.removeClass("redactor-linkify-object"), "" === e.attr("class") && e.removeAttr("class"), e[0] }); setTimeout(t.proxy(function () { this.observe.load(), this.core.setCallback("linkify", o) }, this), 100), this.code.sync() }, convertVideoLinks: function (e) { return e.match(this.opts.linkify.regexps.youtube) && (e = e.replace(this.opts.linkify.regexps.youtube, "<iframe class=\"redactor-linkify-object\" width=\"500\" height=\"281\" src=\"//www.youtube.com/embed/$1\" frameborder=\"0\" allowfullscreen></iframe>")), e.match(this.opts.linkify.regexps.vimeo) && (e = e.replace(this.opts.linkify.regexps.vimeo, "<iframe class=\"redactor-linkify-object\" width=\"500\" height=\"281\" src=\"//player.vimeo.com/video/$2\" frameborder=\"0\" allowfullscreen></iframe>")), e }, convertImages: function (e) { var t = e.match(this.opts.linkify.regexps.image); return t && (e = e.replace(e, "<img src=\"" + t + "\" class=\"redactor-linkify-object\" />"), this.opts.linebreaks && !this.utils.isEmpty(this.code.get()) && (e = "<br>" + e), e += "<br>"), e }, convertLinks: function (e) { var a = e.match(this.opts.linkify.regexps.url); if (a) { a = t.grep(a, function (e, o) { return t.inArray(e, a) === o }); for (var o = a.length, r = 0; r < o; r++) { var l = a[r], n = l, s = this.opts.linkProtocol + "://"; null !== l.match(/(https?|ftp):\/\//i) && (s = ""), n.length > this.opts.linkSize && (n = n.substring(0, this.opts.linkSize) + "..."), -1 === n.search("%") && (n = decodeURIComponent(n)); var d = "\\b"; -1 != t.inArray(l.slice(-1), ["/", "&", "="]) && (d = ""); var c = new RegExp("(" + l.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&") + d + ")", "g"); e = e.replace(c, "<a href=\"" + s + t.trim(l) + "\" class=\"redactor-linkify-object\">" + t.trim(n) + "</a>") } } return e } } }, list: function () { return { toggle: function (e) { this.placeholder.remove(), this.utils.browser("msie") || this.opts.linebreaks || this.$editor.focus(), this.buffer.set(), this.selection.save(); var a = this.selection.getParent(), o = t(a).closest("ol, ul", this.$editor[0]); this.utils.isRedactorParent(o) || 0 === o.length || (o = !1); var r, l, n = !1; if (o && o.length) { n = !0; var i = o[0].tagName; r = "orderedlist" === e && "UL" === i, l = "unorderedlist" === e && "OL" === i } r ? this.utils.replaceToTag(o, "ol") : l ? this.utils.replaceToTag(o, "ul") : n ? this.list.remove(e, o) : this.list.insert(e), this.selection.restore(), this.code.sync() }, insert: function (e) { var a = this.selection.getCurrent(), o = t(a).closest("td, th", this.$editor[0]); this.utils.browser("msie") && this.opts.linebreaks ? this.list.insertInIe(e) : document.execCommand("insert" + e); var r = this.selection.getParent(), l = t(r).closest("ol, ul", this.$editor[0]); if (0 !== o.length) { var n = o.clone(); o.after(n).remove("") } if (this.utils.isEmpty(l.find("li").text())) { var i = l.children("li"); i.find("br").remove(), i.append(this.selection.getMarkerAsHtml()), this.opts.linebreaks && this.utils.browser("mozilla") && 2 == i.length && this.utils.isEmpty(i.eq(1).text()) && i.eq(1).remove() } if (l.length) { var s = l.parent(); this.utils.isRedactorParent(s) && "LI" != s[0].tagName && this.utils.isBlock(s[0]) && s.replaceWith(s.contents()) } this.utils.browser("msie") || this.$editor.focus(), this.clean.clearUnverified() }, insertInIe: function (e) { var a = this.selection.wrap("div"), o = t(a).html(), r = "orderedlist" == e ? t("<ol>") : t("<ul>"), l = t("<li>"); if ("" === t.trim(o)) l.append(this.selection.getMarkerAsHtml()), r.append(l), this.$editor.find("#selection-marker-1").replaceWith(r); else { var n = o.split(/<br\s?\/?>/gi); if (n) for (var s = 0; s < n.length; s++)"" !== t.trim(n[s]) && r.append(t("<li>").html(n[s])); else l.append(o), r.append(l); t(a).replaceWith(r) } }, remove: function (e) { t.inArray("ul", this.selection.getBlocks()) && (e = "unorderedlist"), document.execCommand("insert" + e); var a = t(this.selection.getCurrent()); this.indent.fixEmptyIndent(), this.opts.linebreaks || 0 !== a.closest("li, th, td", this.$editor[0]).length || (document.execCommand("formatblock", !1, "p"), this.$editor.find("ul, ol, blockquote").each(t.proxy(this.utils.removeEmpty, this))); var o = t(this.selection.getCurrent()).closest("table", this.$editor[0]), r = o.prev(); this.opts.linebreaks || 0 === o.length || 0 === r.length || "BR" != r[0].tagName || r.remove(), this.clean.clearUnverified() } } }, modal: function () { return { callbacks: {}, loadTemplates: function () { this.opts.modal = { imageEdit: String() + "<section id=\"redactor-modal-image-edit\"><label>" + this.lang.get("title") + "</label><input type=\"text\" id=\"redactor-image-title\" /><label class=\"redactor-image-link-option\">" + this.lang.get("link") + "</label><input type=\"text\" id=\"redactor-image-link\" class=\"redactor-image-link-option\" aria-label=\"" + this.lang.get("link") + "\" /><label class=\"redactor-image-link-option\"><input type=\"checkbox\" id=\"redactor-image-link-blank\" aria-label=\"" + this.lang.get("link_new_tab") + "\"> " + this.lang.get("link_new_tab") + "</label><label class=\"redactor-image-position-option\">" + this.lang.get("image_position") + "</label><select class=\"redactor-image-position-option\" id=\"redactor-image-align\" aria-label=\"" + this.lang.get("image_position") + "\"><option value=\"none\">" + this.lang.get("none") + "</option><option value=\"left\">" + this.lang.get("left") + "</option><option value=\"center\">" + this.lang.get("center") + "</option><option value=\"right\">" + this.lang.get("right") + "</option></select></section>", image: String() + "<section id=\"redactor-modal-image-insert\"><div id=\"redactor-modal-image-droparea\"></div></section>", file: String() + "<section id=\"redactor-modal-file-insert\"><div id=\"redactor-modal-file-upload-box\"><label>" + this.lang.get("filename") + "</label><input type=\"text\" id=\"redactor-filename\" aria-label=\"" + this.lang.get("filename") + "\" /><br><br><div id=\"redactor-modal-file-upload\"></div></div></section>", link: String() + "<section id=\"redactor-modal-link-insert\"><label>URL</label><input type=\"url\" id=\"redactor-link-url\" aria-label=\"URL\" /><label>" + this.lang.get("text") + "</label><input type=\"text\" id=\"redactor-link-url-text\" aria-label=\"" + this.lang.get("text") + "\" /><label>" + this.lang.get("title") + "</label><input type=\"text\" id=\"redactor-link-url-title\" aria-label=\"" + this.lang.get("title") + "\" /><label><input type=\"checkbox\" id=\"redactor-link-follow\" /> " + this.lang.get("link_no_follow") + "</label><label><input type=\"checkbox\" id=\"redactor-link-blank\" /> " + this.lang.get("link_new_tab") + "</label></section>" }, t.extend(this.opts, this.opts.modal) }, addCallback: function (e, t) { this.modal.callbacks[e] = t }, createTabber: function (e) { this.modal.$tabber = t("<div>").attr("id", "redactor-modal-tabber"), e.prepend(this.modal.$tabber) }, addTab: function (e, a, o) { var r = t("<a href=\"#\" rel=\"tab" + e + "\">").text(a); o && r.addClass("active"); var l = this; r.on("click", function (a) { a.preventDefault(), t(".redactor-tab").hide(), t(".redactor-" + t(this).attr("rel")).show(), l.modal.$tabber.find("a").removeClass("active"), t(this).addClass("active") }), this.modal.$tabber.append(r) }, addTemplate: function (e, t) { this.opts.modal[e] = t }, getTemplate: function (e) { return this.opts.modal[e] }, getModal: function () { return this.$modalBody.find("section") }, load: function (e, t, a) { this.modal.templateName = e, this.modal.width = a, this.modal.build(), this.modal.enableEvents(), this.modal.setTitle(t), this.modal.setDraggable(), this.modal.setContent(), "undefined" != typeof this.modal.callbacks[e] && this.modal.callbacks[e].call(this) }, show: function () { this.utils.disableBodyScroll(), this.utils.isMobile() ? this.modal.showOnMobile() : this.modal.showOnDesktop(), this.opts.highContrast && this.$modalBox.addClass("redactor-modal-contrast"), this.$modalOverlay.show(), this.$modalBox.show(), this.$modal.attr("tabindex", "-1"), this.$modal.focus(), this.modal.setButtonsWidth(), this.utils.saveScroll(), this.utils.isMobile() || (setTimeout(t.proxy(this.modal.showOnDesktop, this), 0), t(window).on("resize.redactor-modal", t.proxy(this.modal.resize, this))), this.core.setCallback("modalOpened", this.modal.templateName, this.$modal), t(document).off("focusin.modal"), this.$modal.find("input[type=text],input[type=url],input[type=email]").on("keydown.redactor-modal", t.proxy(this.modal.setEnter, this)) }, showOnDesktop: function () { var e = this.$modal.outerHeight(), a = t(window).height(), o = t(window).width(); return this.modal.width > o ? void this.$modal.css({ width: "96%", marginTop: a / 2 - e / 2 + "px" }) : void (e > a ? this.$modal.css({ width: this.modal.width + "px", marginTop: "20px" }) : this.$modal.css({ width: this.modal.width + "px", marginTop: a / 2 - e / 2 + "px" })) }, showOnMobile: function () { this.$modal.css({ width: "96%", marginTop: "2%" }) }, resize: function () { this.utils.isMobile() ? this.modal.showOnMobile() : this.modal.showOnDesktop() }, setTitle: function (e) { this.$modalHeader.html(e) }, setContent: function () { this.$modalBody.html(this.modal.getTemplate(this.modal.templateName)) }, setDraggable: function () { "undefined" == typeof t.fn.draggable || (this.$modal.draggable({ handle: this.$modalHeader }), this.$modalHeader.css("cursor", "move")) }, setEnter: function (t) { 13 != t.which || (t.preventDefault(), this.$modal.find("button.redactor-modal-action-btn").click()) }, createCancelButton: function () { var e = t("<button>").addClass("redactor-modal-btn redactor-modal-close-btn").html(this.lang.get("cancel")); e.on("click", t.proxy(this.modal.close, this)), this.$modalFooter.append(e) }, createDeleteButton: function (e) { return this.modal.createButton(e, "delete") }, createActionButton: function (e) { return this.modal.createButton(e, "action") }, createButton: function (e, a) { var o = t("<button>").addClass("redactor-modal-btn").addClass("redactor-modal-" + a + "-btn").html(e); return this.$modalFooter.append(o), o }, setButtonsWidth: function () { var e = this.$modalFooter.find("button"), t = e.length; 0 === t || e.css("width", 100 / t + "%") }, build: function () { this.modal.buildOverlay(), this.$modalBox = t("<div id=\"redactor-modal-box\"/>").hide(), this.$modal = t("<div id=\"redactor-modal\" role=\"dialog\" aria-labelledby=\"redactor-modal-header\" />"), this.$modalHeader = t("<header id=\"redactor-modal-header\"/>"), this.$modalClose = t("<button type=\"button\" id=\"redactor-modal-close\" tabindex=\"1\" aria-label=\"Close\" />").html("&times;"), this.$modalBody = t("<div id=\"redactor-modal-body\" />"), this.$modalFooter = t("<footer />"), this.$modal.append(this.$modalHeader), this.$modal.append(this.$modalClose), this.$modal.append(this.$modalBody), this.$modal.append(this.$modalFooter), this.$modalBox.append(this.$modal), this.$modalBox.appendTo(document.body) }, buildOverlay: function () { this.$modalOverlay = t("<div id=\"redactor-modal-overlay\">").hide(), t("body").prepend(this.$modalOverlay) }, enableEvents: function () { this.$modalClose.on("click.redactor-modal", t.proxy(this.modal.close, this)), t(document).on("keyup.redactor-modal", t.proxy(this.modal.closeHandler, this)), this.$editor.on("keyup.redactor-modal", t.proxy(this.modal.closeHandler, this)), this.$modalBox.on("click.redactor-modal", t.proxy(this.modal.close, this)) }, disableEvents: function () { this.$modalClose.off("click.redactor-modal"), t(document).off("keyup.redactor-modal"), this.$editor.off("keyup.redactor-modal"), this.$modalBox.off("click.redactor-modal"), t(window).off("resize.redactor-modal") }, closeHandler: function (t) { t.which != this.keyCode.ESC || this.modal.close(!1) }, close: function (a) { if (a) { if (!t(a.target).hasClass("redactor-modal-close-btn") && a.target != this.$modalClose[0] && a.target != this.$modalBox[0]) return; a.preventDefault() } this.$modalBox && (this.modal.disableEvents(), this.utils.enableBodyScroll(), this.$modalOverlay.remove(), this.$modalBox.fadeOut("fast", t.proxy(function () { this.$modalBox.remove(), setTimeout(t.proxy(this.utils.restoreScroll, this), 0), void 0 !== a && this.selection.restore(), t(document.body).css("overflow", this.modal.bodyOveflow), this.core.setCallback("modalClosed", this.modal.templateName) }, this))) } } }, observe: function () { return { load: function () { if ("undefined" == typeof this.opts.destroyed) { if (this.utils.browser("msie")) { var e = this; this.$editor.find("pre, code").on("mouseover", function () { e.$editor.attr("contenteditable", !1), t(this).attr("contenteditable", !0) }).on("mouseout", function () { e.$editor.attr("contenteditable", !0), t(this).removeAttr("contenteditable") }) } this.observe.images(), this.observe.links() } }, toolbar: function (t, e) { this.observe.buttons(t, e), this.observe.dropdowns() }, isCurrent: function (e, a) { if ("undefined" == typeof a) var a = t(this.selection.getCurrent()); return a.is(e) || 0 < a.parents(e).length }, dropdowns: function () { var e = t(this.selection.getCurrent()); t.each(this.opts.observe.dropdowns, t.proxy(function (t, a) { var o = a.observe, r = o.element, l = a.item, n = "undefined" != typeof o["in"] && o["in"], i = "undefined" != typeof o.out && o.out; 0 < e.closest(r).length ? this.observe.setDropdownProperties(l, n, i) : this.observe.setDropdownProperties(l, i, n) }, this)) }, setDropdownProperties: function (e, t, a) { a && "undefined" != typeof a.attr && this.observe.setDropdownAttr(e, a.attr, !0), "undefined" != typeof t.attr && this.observe.setDropdownAttr(e, t.attr), "undefined" != typeof t.title && e.text(t.title) }, setDropdownAttr: function (e, a, o) { t.each(a, function (t, a) { "class" == t ? o ? e.removeClass(a) : e.addClass(a) : o ? e.removeAttr(t) : e.attr(t, a) }) }, addDropdown: function (e, t, a) { "undefined" == typeof a.observe || (a.item = e, this.opts.observe.dropdowns.push(a)) }, buttons: function (a, e) { var o = this.selection.getCurrent(), r = this.selection.getParent(); if (!1 === a ? this.button.setInactiveAll(e) : this.button.setInactiveAll(), !1 === a && "html" !== e) return void (-1 != t.inArray(e, this.opts.activeButtons) && this.button.toggleActive(e)); t.each(this.opts.activeButtonsStates, t.proxy(function (e, a) { var l = t(r).closest(e, this.$editor[0]), n = t(o).closest(e, this.$editor[0]); (0 === l.length || this.utils.isRedactorParent(l)) && this.utils.isRedactorParent(n) && (0 === l.length && 0 === n.closest(e, this.$editor[0]).length || this.button.setActive(a)) }, this)); var l = t(r).closest(this.opts.alignmentTags.toString().toLowerCase(), this.$editor[0]); if (this.utils.isRedactorParent(r) && l.length) { var n = "" === l.css("text-align") ? "left" : l.css("text-align"); this.button.setActive("align" + n) } }, addButton: function (e, t) { this.opts.activeButtons.push(t), this.opts.activeButtonsStates[e] = t }, images: function () { this.$editor.find("img").each(t.proxy(function (e, a) { var o = t(a); o.closest("a", this.$editor[0]).on("click", function (t) { t.preventDefault() }), this.utils.browser("msie") && o.attr("unselectable", "on"), this.image.setEditable(o) }, this)), t(document).on("click.redactor-image-delete." + this.uuid, t.proxy(function (t) { this.observe.image = !1, "IMG" == t.target.tagName && this.utils.isRedactorParent(t.target) && (this.observe.image = !(this.observe.image && this.observe.image == t.target) && t.target) }, this)) }, links: function () { this.opts.linkTooltip && (this.$editor.find("a").on("touchstart.redactor." + this.uuid + " click.redactor." + this.uuid, t.proxy(this.observe.showTooltip, this)), this.$editor.on("touchstart.redactor." + this.uuid + " click.redactor." + this.uuid, t.proxy(this.observe.closeTooltip, this)), t(document).on("touchstart.redactor." + this.uuid + " click.redactor." + this.uuid, t.proxy(this.observe.closeTooltip, this))) }, getTooltipPosition: function (e) { return e.offset() }, showTooltip: function (a) { var e = t(a.target); if ("IMG" != e[0].tagName && ("A" !== e[0].tagName && (e = e.closest("a", this.$editor[0])), "A" === e[0].tagName)) { var o = e, r = this.observe.getTooltipPosition(o), l = t("<span class=\"redactor-link-tooltip\"></span>"), n = o.attr("href"); void 0 === n && (n = ""), 24 < n.length && (n = n.substring(0, 24) + "..."); var i = t("<a href=\"" + o.attr("href") + "\" target=\"_blank\" />").html(n).addClass("redactor-link-tooltip-action"), s = t("<a href=\"#\" />").html(this.lang.get("edit")).on("click", t.proxy(this.link.show, this)).addClass("redactor-link-tooltip-action"), d = t("<a href=\"#\" />").html(this.lang.get("unlink")).on("click", t.proxy(this.link.unlink, this)).addClass("redactor-link-tooltip-action"); l.append(i).append(" | ").append(s).append(" | ").append(d), l.css({ top: r.top + parseInt(o.css("line-height"), 10) + "px", left: r.left + "px" }), t(".redactor-link-tooltip").remove(), t("body").append(l) } }, closeTooltip: function (a) { a = a.originalEvent || a; var o = a.target, r = t(o).closest("a", this.$editor[0]); (0 === r.length || "A" !== r[0].tagName || "A" === o.tagName) && ("A" === o.tagName && this.utils.isRedactorParent(o) || t(o).hasClass("redactor-link-tooltip-action") || t(".redactor-link-tooltip").remove()) } } }, paragraphize: function () { return { load: function (e) { return this.opts.linebreaks ? e : "" === e || "<p></p>" === e ? this.opts.emptyHtml : (e += "\n", this.paragraphize.safes = [], this.paragraphize.z = 0, e = e.replace(/(<br\s?\/?>){1,}\n?<\/blockquote>/gi, "</blockquote>"), e = this.paragraphize.getSafes(e), e = this.paragraphize.getSafesComments(e), e = this.paragraphize.replaceBreaksToNewLines(e), e = this.paragraphize.replaceBreaksToParagraphs(e), e = this.paragraphize.clear(e), e = this.paragraphize.restoreSafes(e), e = e.replace(new RegExp("<br\\s?/?>\n?<(" + this.opts.paragraphizeBlocks.join("|") + ")(.*?[^>])>", "gi"), "<p><br /></p>\n<$1$2>"), t.trim(e)) }, getSafes: function (e) { var a = t("<div />").append(e); return a.find("blockquote p").replaceWith(function () { return t(this).append("<br />").contents() }), e = a.html(), a.find(this.opts.paragraphizeBlocks.join(", ")).each(t.proxy(function (t, a) { this.paragraphize.z++ , this.paragraphize.safes[this.paragraphize.z] = a.outerHTML, e = e.replace(a.outerHTML, "\n{replace" + this.paragraphize.z + "}") }, this)), e }, getSafesComments: function (e) { var a = e.match(/<!--([\w\W]*?)-->/gi); return a ? (t.each(a, t.proxy(function (t, a) { this.paragraphize.z++ , this.paragraphize.safes[this.paragraphize.z] = a, e = e.replace(a, "\n{replace" + this.paragraphize.z + "}") }, this)), e) : e }, restoreSafes: function (e) { return t.each(this.paragraphize.safes, function (t, a) { a = "undefined" == typeof a ? a : a.replace(/\$/g, "&#36;"), e = e.replace("{replace" + t + "}", a) }), e }, replaceBreaksToParagraphs: function (e) { var t = e.split(/\n/g, -1); if (e = "", t) for (var a = t.length, o = 0; o < a; o++) { if (!t.hasOwnProperty(o)) return; -1 == t[o].search("{replace") ? (t[o] = t[o].replace(/<p>\n\t?<\/p>/gi, ""), t[o] = t[o].replace(/<p><\/p>/gi, ""), "" !== t[o] && (e += "<p>" + t[o].replace(/^\n+|\n+$/g, "") + "</p>")) : e += t[o] } return e }, replaceBreaksToNewLines: function (e) { return e = e.replace(/<br \/>\s*<br \/>/gi, "\n\n"), e = e.replace(/<br\s?\/?>\n?<br\s?\/?>/gi, "\n<br /><br />"), e = e.replace(/\r\n/g, "\n"), e = e.replace(/\r/g, "\n"), e = e.replace(/\/\n\n+\//, "g", "\n\n"), e }, clear: function (e) { return e = e.replace(/<\/blockquote><\/p>/gi, "</blockquote>"), e = e.replace(/<p><\/blockquote>/gi, "</blockquote>"), e = e.replace(/<p><blockquote>/gi, "<blockquote>"), e = e.replace(/<blockquote><\/p>/gi, "<blockquote>"), e = e.replace(/<p><p /gi, "<p "), e = e.replace(/<p><p>/gi, "<p>"), e = e.replace(/<\/p><\/p>/gi, "</p>"), e = e.replace(/<p>\s?<\/p>/gi, ""), e = e.replace(/\n<\/p>/gi, "</p>"), e = e.replace(/<p>	?	?\n?<p>/gi, "<p>"), e = e.replace(/<p>	*<\/p>/gi, ""), e } } }, paste: function () { return { init: function () { return this.opts.cleanOnPaste ? void (this.rtePaste = !0, this.buffer.set(), this.selection.save(), this.utils.saveScroll(), this.paste.createPasteBox(), t(window).on("scroll.redactor-freeze", t.proxy(function () { t(window).scrollTop(this.saveBodyScroll) }, this)), setTimeout(t.proxy(function () { var e = this.$pasteBox.html(); this.$pasteBox.remove(), this.selection.restore(), this.utils.restoreScroll(), this.paste.insert(e), t(window).off("scroll.redactor-freeze"), this.linkify.isEnabled() && this.linkify.format() }, this), 1)) : void setTimeout(t.proxy(this.code.sync, this), 1) }, createPasteBox: function () { if (this.$pasteBox = t("<div>").html("").attr("contenteditable", "true").css({ position: "fixed", width: 0, top: 0, left: "-9999px" }), this.utils.browser("msie")) this.$box.append(this.$pasteBox); else { var e = t(".modal-body:visible"); 0 < e.length ? e.append(this.$pasteBox) : t("body").append(this.$pasteBox) } this.$pasteBox.get(0).focus() }, insert: function (e) { e = this.core.setCallback("pasteBefore", e), e = this.utils.isSelectAll() ? this.clean.onPaste(e, !1) : this.clean.onPaste(e), e = this.core.setCallback("paste", e), this.utils.isSelectAll() ? this.insert.set(e, !1) : this.insert.html(e, !1), this.utils.disableSelectAll(), this.rtePaste = !1, setTimeout(t.proxy(this.clean.clearUnverified, this), 10), setTimeout(t.proxy(function () { var e = this.$editor.find("span"); t.each(e, function (e, a) { var o = a.innerHTML.replace(/\u200B/, ""); "" === o && 0 === a.attributes.length && t(a).remove() }) }, this), 10) } } }, placeholder: function () { return { enable: function () { this.placeholder.is() && (this.$editor.attr("placeholder", this.$element.attr("placeholder")), this.placeholder.toggle(), this.$editor.on("keydown.redactor-placeholder", t.proxy(this.placeholder.toggle, this))) }, toggle: function () { setTimeout(t.proxy(function () { var e = this.utils.isEmpty(this.$editor.html(), !1) ? "addClass" : "removeClass"; this.$editor[e]("redactor-placeholder") }, this), 5) }, remove: function () { this.$editor.removeClass("redactor-placeholder") }, is: function () { return this.opts.placeholder ? this.$element.attr("placeholder", this.opts.placeholder) : "undefined" != typeof this.$element.attr("placeholder") && "" !== this.$element.attr("placeholder") } } }, progress: function () { return { show: function () { t(document.body).append(t("<div id=\"redactor-progress\"><span></span></div>")), t("#redactor-progress").fadeIn() }, hide: function () { t("#redactor-progress").fadeOut(1500, function () { t(this).remove() }) } } }, selection: function () { return { get: function () { this.sel = document.getSelection(), this.range = document.getSelection && this.sel.getRangeAt && this.sel.rangeCount ? this.sel.getRangeAt(0) : document.createRange() }, addRange: function () { try { this.sel.removeAllRanges() } catch (t) { } this.sel.addRange(this.range) }, getCurrent: function () { var e = !1; return this.selection.get(), this.sel && 0 < this.sel.rangeCount && (e = this.sel.getRangeAt(0).startContainer), this.utils.isRedactorParent(e) }, getParent: function (e) { return e = e || this.selection.getCurrent(), !!e && this.utils.isRedactorParent(t(e).parent()[0]) }, getPrev: function () { return window.getSelection().anchorNode.previousSibling }, getNext: function () { return window.getSelection().anchorNode.nextSibling }, getBlock: function (e) { for (e = e || this.selection.getCurrent(); e;) { if (this.utils.isBlockTag(e.tagName)) return !t(e).hasClass("redactor-editor") && e; e = e.parentNode } return !1 }, getInlines: function (e, a) { if (this.selection.get(), this.range && this.range.collapsed) return !1; var o = []; e = "undefined" == typeof e || !1 === e ? this.selection.getNodes() : e; var r = this.opts.inlineTags; if (r.push("span"), "undefined" != typeof a) for (var l = 0; l < a.length; l++)r.push(a[l]); return t.each(e, t.proxy(function (e, a) { -1 != t.inArray(a.tagName.toLowerCase(), r) && o.push(a) }, this)), 0 !== o.length && o }, getInlinesTags: function (e) { if (this.selection.get(), this.range && this.range.collapsed) return !1; var a = [], o = this.selection.getNodes(); return t.each(o, t.proxy(function (o, r) { -1 != t.inArray(r.tagName.toLowerCase(), e) && a.push(r) }, this)), 0 !== a.length && a }, getBlocks: function (e) { if (this.selection.get(), this.range && this.range.collapsed) return [this.selection.getBlock()]; var a = []; return e = "undefined" == typeof e ? this.selection.getNodes() : e, t.each(e, t.proxy(function (e, t) { this.utils.isBlock(t) && a.push(t) }, this)), 0 === a.length ? [this.selection.getBlock()] : a }, getLastBlock: function () { return this.selection.lastBlock }, getNodes: function () { this.selection.get(); var e = this.selection.getNodesMarker(1), a = this.selection.getNodesMarker(2); if (!1 !== this.range.collapsed) this.selection.setNodesMarker(this.range, e, !0), a = e; else if (window.getSelection) { var o = window.getSelection(); if (0 < o.rangeCount) { var r = o.getRangeAt(0), l = r.startContainer, n = r.startOffset, s = r.cloneRange(); s.collapse(!1), s.insertNode(a), s.setStart(l, n), s.collapse(!0), s.insertNode(e), r.setStartAfter(e), r.setEndBefore(a), o.removeAllRanges(), o.addRange(r) } } var d = [], c = 0, p = this; this.$editor.find("*").each(function () { if (this == e) { var o = t(this).parent(); 0 !== o.length && "BODY" != o[0].tagName && p.utils.isRedactorParent(o[0]) && d.push(o[0]), d.push(this), c = 1 } else 0 < c && (d.push(this), ++c); return this != a && void 0 }); for (var u = [], m = d.length, g = 0; g < m; g++)"nodes-marker-1" != d[g].id && "nodes-marker-2" != d[g].id && u.push(d[g]); return this.selection.removeNodesMarkers(), u }, getNodesMarker: function (e) { return t("<span id=\"nodes-marker-" + e + "\" class=\"redactor-nodes-marker\" data-verified=\"redactor\">" + this.opts.invisibleSpace + "</span>")[0] }, setNodesMarker: function (e, t, a) { var e = e.cloneRange(); try { e.collapse(a), e.insertNode(t) } catch (t) { } }, removeNodesMarkers: function () { t(document).find("span.redactor-nodes-marker").remove(), this.$editor.find("span.redactor-nodes-marker").remove() }, fromPoint: function (e, t) { this.caret.setOffset(e, t) }, wrap: function (e) { if (this.selection.get(), this.range.collapsed) return !1; var t = document.createElement(e); return t.appendChild(this.range.extractContents()), this.range.insertNode(t), t }, selectElement: function (e) { if (this.utils.browser("mozilla")) { e = e[0] || e; var t = document.createRange(); t.selectNodeContents(e) } else this.caret.set(e, 0, e, 1) }, selectAll: function () { this.selection.get(), this.range.selectNodeContents(this.$editor[0]), this.selection.addRange() }, remove: function () { this.selection.get(), this.sel.removeAllRanges() }, save: function () { this.selection.createMarkers() }, createMarkers: function () { this.selection.get(); var e = this.selection.getMarker(1); if (this.selection.setMarker(this.range, e, !0), !1 === this.range.collapsed) { var t = this.selection.getMarker(2); this.selection.setMarker(this.range, t, !1), this.utils.browser("chrome") && this.caret.set(e, 0, t, 0) } this.savedSel = this.$editor.html() }, getMarker: function (e) { return "undefined" == typeof e && (e = 1), t("<span id=\"selection-marker-" + e + "\" class=\"redactor-selection-marker\"  data-verified=\"redactor\">" + this.opts.invisibleSpace + "</span>")[0] }, getMarkerAsHtml: function (e) { return this.utils.getOuterHtml(this.selection.getMarker(e)) }, setMarker: function (e, t, a) { e = e.cloneRange(); try { e.collapse(a), e.insertNode(t) } catch (t) { this.focus.setStart() } }, restore: function () { var e = this.$editor.find("span#selection-marker-1"), t = this.$editor.find("span#selection-marker-2"); this.utils.browser("mozilla") && this.$editor.focus(), 0 !== e.length && 0 !== t.length ? this.caret.set(e, 0, t, 0) : 0 === e.length ? this.$editor.focus() : this.caret.set(e, 0, e, 0), this.selection.removeMarkers(), this.savedSel = !1 }, removeMarkers: function () { this.$editor.find("span.redactor-selection-marker").each(function (e, a) { var o = t(a).text().replace(/\u200B/g, ""); "" === o ? t(a).remove() : t(a).replaceWith(function () { return t(this).contents() }) }) }, getText: function () { return this.selection.get(), this.sel.toString() }, getHtml: function () { var e = ""; if (this.selection.get(), this.sel.rangeCount) { for (var t = document.createElement("div"), a = this.sel.rangeCount, o = 0; o < a; ++o)t.appendChild(this.sel.getRangeAt(o).cloneContents()); e = t.innerHTML } return this.clean.onSync(e) }, replaceSelection: function (e) { this.selection.get(), this.range.deleteContents(); var t = document.createElement("div"); t.innerHTML = e; for (var a, o = document.createDocumentFragment(); a = t.firstChild;)o.appendChild(a); this.range.insertNode(o) }, replaceWithHtml: function (e) { e = this.selection.getMarkerAsHtml(1) + e + this.selection.getMarkerAsHtml(2), this.selection.get(), window.getSelection && window.getSelection().getRangeAt ? this.selection.replaceSelection(e) : document.selection && document.selection.createRange && this.range.pasteHTML(e), this.selection.restore(), this.code.sync() } } }, shortcuts: function () { return { init: function (a, e) { return this.opts.shortcuts ? void t.each(this.opts.shortcuts, t.proxy(function (e, o) { for (var r = e.split(","), l = r.length, n = 0; n < l; n++)"string" == typeof r[n] && this.shortcuts.handler(a, t.trim(r[n]), t.proxy(function () { var e; "-1" == o.func.search(/\./) ? this[o.func].apply(this, o.params) : (e = o.func.split("."), "undefined" != typeof this[e[0]] && this[e[0]][e[1]].apply(this, o.params)) }, this)) }, this)) : ((a.ctrlKey || a.metaKey) && (66 === e || 73 === e) && a.preventDefault(), !1) }, handler: function (a, e, o) { var r = { "`": "~", 1: "!", 2: "@", 3: "#", 4: "$", 5: "%", 6: "^", 7: "&", 8: "*", 9: "(", 0: ")", "-": "_", "=": "+", ";": ": ", "'": "\"", ",": "<", ".": ">", "/": "?", "\\": "|" }; e = e.toLowerCase().split(" "); var l = { 8: "backspace", 9: "tab", 10: "return", 13: "return", 16: "shift", 17: "ctrl", 18: "alt", 19: "pause", 20: "capslock", 27: "esc", 32: "space", 33: "pageup", 34: "pagedown", 35: "end", 36: "home", 37: "left", 38: "up", 39: "right", 40: "down", 45: "insert", 46: "del", 59: ";", 61: "=", 96: "0", 97: "1", 98: "2", 99: "3", 100: "4", 101: "5", 102: "6", 103: "7", 104: "8", 105: "9", 106: "*", 107: "+", 109: "-", 110: ".", 111: "/", 112: "f1", 113: "f2", 114: "f3", 115: "f4", 116: "f5", 117: "f6", 118: "f7", 119: "f8", 120: "f9", 121: "f10", 122: "f11", 123: "f12", 144: "numlock", 145: "scroll", 173: "-", 186: ";", 187: "=", 188: ",", 189: "-", 190: ".", 191: "/", 192: "`", 219: "[", 220: "\\", 221: "]", 222: "'" }[a.keyCode], n = String.fromCharCode(a.which).toLowerCase(), s = "", d = {}; t.each(["alt", "ctrl", "meta", "shift"], function (e, t) { a[t + "Key"] && l !== t && (s += t + "+") }), l && (d[s + l] = !0), n && (d[s + n] = !0, d[s + r[n]] = !0, "shift+" === s && (d[r[n]] = !0)); for (var c = 0, p = e.length; c < p; c++)if (d[e[c]]) return a.preventDefault(), o.apply(this, arguments) } } }, tabifier: function () { return { get: function (e) { if (!this.opts.tabifier) return e; var a = ["area", "body", "head", "hr", "i?frame", "link", "meta", "noscript", "style", "script", "table", "tbody", "thead", "tfoot"], o = ["li", "dt", "dt", "h[1-6]", "option", "script"]; this.tabifier.lineBefore = new RegExp("^<(/?" + a.join("|/?") + "|" + o.join("|") + ")[ >]"), this.tabifier.lineAfter = new RegExp("^<(br|/?" + a.join("|/?") + "|/" + o.join("|/") + ")[ >]"), this.tabifier.newLevel = new RegExp("^</?(" + ["p", "blockquote", "div", "dl", "fieldset", "form", "frameset", "map", "ol", "pre", "select", "td", "th", "tr", "ul"].join("|") + ")[ >]"); var r = 0, l = e.length, n = 0, s = null, d = null, c = "", p = "", u = ""; for (this.tabifier.cleanlevel = 0; r < l; r++) { if (n = r, -1 == e.substr(r).indexOf("<")) return p += e.substr(r), this.tabifier.finish(p); for (; n < l && "<" != e.charAt(n);)n++; for (r != n && (u = e.substr(r, n - r), !u.match(/^\s{2,}$/g) && ("\n" == p.charAt(p.length - 1) ? p += this.tabifier.getTabs() : "\n" == u.charAt(0) && (p += "\n" + this.tabifier.getTabs(), u = u.replace(/^\s+/, "")), p += u), u.match(/\n/) && (p += "\n" + this.tabifier.getTabs())), s = n; n < l && ">" != e.charAt(n);)n++; c = e.substr(s, n - s), r = n; var m; if ("!--" == c.substr(1, 3)) { if (!c.match(/--$/)) { for (; "-->" != e.substr(n, 3);)n++; n += 2, c = e.substr(s, n - s), r = n } "\n" != p.charAt(p.length - 1) && (p += "\n"), p += this.tabifier.getTabs(), p += c + ">\n" } else "!" == c[1] ? p = this.tabifier.placeTag(c + ">", p) : "?" == c[1] ? p += c + ">\n" : (m = c.match(/^<(script|style|pre)/i)) ? (m[1] = m[1].toLowerCase(), c = this.tabifier.cleanTag(c), p = this.tabifier.placeTag(c, p), d = (e.substr(r + 1) + "").toLowerCase().indexOf("</" + m[1]), d && (u = e.substr(r + 1, d), r += d, p += u)) : (c = this.tabifier.cleanTag(c), p = this.tabifier.placeTag(c, p)) } return this.tabifier.finish(p) }, getTabs: function () { for (var e = "", t = 0; t < this.tabifier.cleanlevel; t++)e += "\t"; return e }, finish: function (e) { return e = e.replace(/\n\s*\n/g, "\n"), e = e.replace(/^[\s\n]*/, ""), e = e.replace(/[\s\n]*$/, ""), e = e.replace(/<script(.*?)>\n<\/script>/gi, "<script$1></script>"), this.tabifier.cleanlevel = 0, e }, cleanTag: function (e) { var t = ""; e = e.replace(/\n/g, " "), e = e.replace(/\s{2,}/g, " "), e = e.replace(/^\s+|\s+$/g, " "); var a = ""; e.match(/\/$/) && (a = "/", e = e.replace(/\/+$/, "")); for (var o; o = /\s*([^= ]+)(?:=((['"']).*?\3|[^ ]+))?/.exec(e);)o[2] ? t += o[1].toLowerCase() + "=" + o[2] : o[1] && (t += o[1].toLowerCase()), t += " ", e = e.substr(o[0].length); return t.replace(/\s*$/, "") + a + ">" }, placeTag: function (e, t) { var a = e.match(this.tabifier.newLevel); return (e.match(this.tabifier.lineBefore) || a) && (t = t.replace(/\s*$/, ""), t += "\n"), a && "/" == e.charAt(1) && this.tabifier.cleanlevel-- , "\n" == t.charAt(t.length - 1) && (t += this.tabifier.getTabs()), a && "/" != e.charAt(1) && this.tabifier.cleanlevel++ , t += e, (e.match(this.tabifier.lineAfter) || e.match(this.tabifier.newLevel)) && (t = t.replace(/ *$/, "")), t } } }, tidy: function () { return { setupAllowed: function () { var e = t.inArray("span", this.opts.removeEmpty); if (-1 !== e && this.opts.removeEmpty.splice(e, 1), this.opts.allowedTags && (this.opts.deniedTags = !1), this.opts.allowedAttr && (this.opts.removeAttr = !1), !this.opts.linebreaks) { var a = ["p", "section"]; this.opts.allowedTags && this.tidy.addToAllowed(a), this.opts.deniedTags && this.tidy.removeFromDenied(a) } }, addToAllowed: function (e) { for (var a = e.length, o = 0; o < a; o++)-1 == t.inArray(e[o], this.opts.allowedTags) && this.opts.allowedTags.push(e[o]) }, removeFromDenied: function (e) { for (var a, o = e.length, r = 0; r < o; r++)a = t.inArray(e[r], this.opts.deniedTags), -1 != a && this.opts.deniedTags.splice(a, 1) }, load: function (e, a) { return this.tidy.settings = { deniedTags: this.opts.deniedTags, allowedTags: this.opts.allowedTags, removeComments: this.opts.removeComments, replaceTags: this.opts.replaceTags, replaceStyles: this.opts.replaceStyles, removeDataAttr: this.opts.removeDataAttr, removeAttr: this.opts.removeAttr, allowedAttr: this.opts.allowedAttr, removeWithoutAttr: this.opts.removeWithoutAttr, removeEmpty: this.opts.removeEmpty }, t.extend(this.tidy.settings, a), e = this.tidy.removeComments(e), this.tidy.$div = t("<div />").append(e), this.tidy.replaceTags(), this.tidy.replaceStyles(), this.tidy.removeTags(), this.tidy.removeAttr(), this.tidy.removeEmpty(), this.tidy.removeParagraphsInLists(), this.tidy.removeDataAttr(), this.tidy.removeWithoutAttr(), e = this.tidy.$div.html(), this.tidy.$div.remove(), e }, removeComments: function (e) { return this.tidy.settings.removeComments ? e.replace(/<!--[\s\S]*?-->/gi, "") : e }, replaceTags: function (e) { if (!this.tidy.settings.replaceTags) return e; for (var a = this.tidy.settings.replaceTags.length, o = [], r = [], l = 0; l < a; l++)r.push(this.tidy.settings.replaceTags[l][1]), o.push(this.tidy.settings.replaceTags[l][0]); t.each(o, t.proxy(function (e, a) { this.tidy.$div.find(a).replaceWith(function () { return t("<" + r[e] + " />", { html: t(this).html() }) }) }, this)) }, replaceStyles: function () { if (this.tidy.settings.replaceStyles) { var e = this.tidy.settings.replaceStyles.length; this.tidy.$div.find("span").each(t.proxy(function (a, o) { for (var r = t(o), l = r.attr("style"), n = 0; n < e; n++)if (l && l.match(new RegExp("^" + this.tidy.settings.replaceStyles[n][0], "i"))) { var s = this.tidy.settings.replaceStyles[n][1]; r.replaceWith(function () { var e = document.createElement(s); return t(e).append(t(this).contents()) }) } }, this)) } }, removeTags: function () { !this.tidy.settings.deniedTags && this.tidy.settings.allowedTags && this.tidy.$div.find("*").not(this.tidy.settings.allowedTags.join(",")).each(function (e, a) { "" === a.innerHTML ? t(a).remove() : t(a).contents().unwrap() }), this.tidy.settings.deniedTags && this.tidy.$div.find(this.tidy.settings.deniedTags.join(",")).each(function (e, a) { t(a).hasClass("redactor-script-tag") || t(a).hasClass("redactor-selection-marker") || ("" === a.innerHTML ? t(a).remove() : t(a).contents().unwrap()) }) }, removeAttr: function () { var e; if (!this.tidy.settings.removeAttr && this.tidy.settings.allowedAttr) { var a = [], o = []; e = this.tidy.settings.allowedAttr.length; for (var r = 0; r < e; r++)a.push(this.tidy.settings.allowedAttr[r][0]), o.push(this.tidy.settings.allowedAttr[r][1]); this.tidy.$div.find("*").each(t.proxy(function (e, r) { var l = t(r), n = t.inArray(l[0].tagName.toLowerCase(), a), i = this.tidy.removeAttrGetRemoves(n, o, l); i && t.each(i, function (e, t) { l.removeAttr(t) }) }, this)) } if (this.tidy.settings.removeAttr) { e = this.tidy.settings.removeAttr.length; for (var l, r = 0; r < e; r++)l = this.tidy.settings.removeAttr[r][1], t.isArray(l) && (l = l.join(" ")), this.tidy.$div.find(this.tidy.settings.removeAttr[r][0]).removeAttr(l) } }, removeAttrGetRemoves: function (e, a, o) { var r = []; return -1 == e ? t.each(o[0].attributes, function (e, t) { r.push(t.name) }) : "*" == a[e] ? r = [] : t.each(o[0].attributes, function (o, l) { t.isArray(a[e]) ? -1 == t.inArray(l.name, a[e]) && r.push(l.name) : a[e] != l.name && r.push(l.name) }), r }, removeAttrs: function (e, a) { return a = new RegExp(a, "g"), e.each(function () { for (var e, o = t(this), r = this.attributes.length - 1, l = r; 0 <= l; l--)e = this.attributes[l], e && e.specified && 0 <= e.name.search(a) && o.removeAttr(e.name) }) }, removeEmpty: function () { this.tidy.settings.removeEmpty && this.tidy.$div.find(this.tidy.settings.removeEmpty.join(",")).each(function () { var e = t(this), a = e.text(); a = a.replace(/\u200B/g, ""), a = a.replace(/&nbsp;/gi, ""), a = a.replace(/\s/g, ""), "" === a && 0 === e.children().length && e.remove() }) }, removeParagraphsInLists: function () { this.tidy.$div.find("li p").contents().unwrap() }, removeDataAttr: function () { if (this.tidy.settings.removeDataAttr) { var e = this.tidy.settings.removeDataAttr; t.isArray(this.tidy.settings.removeDataAttr) && (e = this.tidy.settings.removeDataAttr.join(",")), this.tidy.removeAttrs(this.tidy.$div.find(e), "^(data-)") } }, removeWithoutAttr: function () { this.tidy.settings.removeWithoutAttr && this.tidy.$div.find(this.tidy.settings.removeWithoutAttr.join(",")).each(function () { 0 === this.attributes.length && t(this).contents().unwrap() }) } } }, toolbar: function () { return { init: function () { return { html: { title: this.lang.get("html"), func: "code.toggle" }, formatting: { title: this.lang.get("formatting"), dropdown: { p: { title: this.lang.get("paragraph"), func: "block.format" }, blockquote: { title: this.lang.get("quote"), func: "block.format" }, pre: { title: this.lang.get("code"), func: "block.format" }, h1: { title: this.lang.get("header1"), func: "block.format" }, h2: { title: this.lang.get("header2"), func: "block.format" }, h3: { title: this.lang.get("header3"), func: "block.format" }, h4: { title: this.lang.get("header4"), func: "block.format" }, h5: { title: this.lang.get("header5"), func: "block.format" } } }, bold: { title: this.lang.get("bold"), func: "inline.format" }, italic: { title: this.lang.get("italic"), func: "inline.format" }, deleted: { title: this.lang.get("deleted"), func: "inline.format" }, underline: { title: this.lang.get("underline"), func: "inline.format" }, unorderedlist: { title: "&bull; " + this.lang.get("unorderedlist"), func: "list.toggle" }, orderedlist: { title: "1. " + this.lang.get("orderedlist"), func: "list.toggle" }, outdent: { title: "< " + this.lang.get("outdent"), func: "indent.decrease" }, indent: { title: "> " + this.lang.get("indent"), func: "indent.increase" }, image: { title: this.lang.get("image"), func: "image.show" }, file: { title: this.lang.get("file"), func: "file.show" }, link: { title: this.lang.get("link"), dropdown: { link: { title: this.lang.get("link_insert"), func: "link.show", observe: { element: "a", in: { title: this.lang.get("link_edit") }, out: { title: this.lang.get("link_insert") } } }, unlink: { title: this.lang.get("unlink"), func: "link.unlink", observe: { element: "a", out: { attr: { class: "redactor-dropdown-link-inactive", "aria-disabled": !0 } } } } } }, alignment: { title: this.lang.get("alignment"), dropdown: { left: { title: this.lang.get("align_left"), func: "alignment.left" }, center: { title: this.lang.get("align_center"), func: "alignment.center" }, right: { title: this.lang.get("align_right"), func: "alignment.right" }, justify: { title: this.lang.get("align_justify"), func: "alignment.justify" } } }, horizontalrule: { title: this.lang.get("horizontalrule"), func: "line.insert" } } }, build: function () { this.toolbar.hideButtons(), this.toolbar.hideButtonsOnMobile(), this.toolbar.isButtonSourceNeeded(); 0 === this.opts.buttons.length || (this.$toolbar = this.toolbar.createContainer(), this.toolbar.setOverflow(), this.toolbar.append(), this.toolbar.setFormattingTags(), this.toolbar.loadButtons(), this.toolbar.setFixed(), this.opts.activeButtons && this.$editor.on("mouseup.redactor keyup.redactor focus.redactor", t.proxy(this.observe.toolbar, this))) }, createContainer: function () { return t("<ul>").addClass("redactor-toolbar").attr({ id: "redactor-toolbar-" + this.uuid, role: "toolbar" }) }, setFormattingTags: function () { t.each(this.opts.toolbar.formatting.dropdown, t.proxy(function (e) { -1 == t.inArray(e, this.opts.formatting) && delete this.opts.toolbar.formatting.dropdown[e] }, this)) }, loadButtons: function () { t.each(this.opts.buttons, t.proxy(function (e, a) { if (this.opts.toolbar[a]) { if ("file" === a) { if (!1 === this.opts.fileUpload) return; if (!this.opts.fileUpload && !1 === this.opts.s3) return } if ("image" === a) { if (!1 === this.opts.imageUpload) return; if (!this.opts.imageUpload && !1 === this.opts.s3) return } var o = this.opts.toolbar[a]; this.$toolbar.append(t("<li>").append(this.button.build(a, o))) } }, this)) }, append: function () { this.opts.toolbarExternal ? (this.$toolbar.addClass("redactor-toolbar-external"), t(this.opts.toolbarExternal).html(this.$toolbar)) : this.$box.prepend(this.$toolbar) }, setFixed: function () { this.utils.isDesktop() && !this.opts.toolbarExternal && this.opts.toolbarFixed && (this.toolbar.observeScroll(), t(this.opts.toolbarFixedTarget).on("scroll.redactor." + this.uuid, t.proxy(this.toolbar.observeScroll, this))) }, setOverflow: function () { this.utils.isMobile() && this.opts.toolbarOverflow && this.$toolbar.addClass("redactor-toolbar-overflow") }, isButtonSourceNeeded: function () { if (!this.opts.source) { var e = this.opts.buttons.indexOf("html"); -1 !== e && this.opts.buttons.splice(e, 1) } }, hideButtons: function () { 0 === this.opts.buttonsHide.length || t.each(this.opts.buttonsHide, t.proxy(function (e, t) { var a = this.opts.buttons.indexOf(t); this.opts.buttons.splice(a, 1) }, this)) }, hideButtonsOnMobile: function () { this.utils.isMobile() && 0 !== this.opts.buttonsHideOnMobile.length && t.each(this.opts.buttonsHideOnMobile, t.proxy(function (e, t) { var a = this.opts.buttons.indexOf(t); this.opts.buttons.splice(a, 1) }, this)) }, observeScroll: function () { var e = t(this.opts.toolbarFixedTarget).scrollTop(), a = 1; this.opts.toolbarFixedTarget === document && (a = this.$box.offset().top), e + this.opts.toolbarFixedTopOffset > a ? this.toolbar.observeScrollEnable(e, a) : this.toolbar.observeScrollDisable() }, observeScrollEnable: function (e, a) { var o = this.opts.toolbarFixedTopOffset + e - a, r = a + this.$box.height() - 32, l = this.$box.innerWidth(); this.$toolbar.addClass("toolbar-fixed-box"), this.$toolbar.css({ position: "absolute", width: l, top: o + "px", left: 0 }), e > r && t(".redactor-dropdown-" + this.uuid + ":visible").hide(), this.toolbar.setDropdownsFixed(), this.$toolbar.css("visibility", e < r ? "visible" : "hidden") }, observeScrollDisable: function () { this.$toolbar.css({ position: "relative", width: "auto", top: 0, left: 0, visibility: "visible" }), this.toolbar.unsetDropdownsFixed(), this.$toolbar.removeClass("toolbar-fixed-box") }, setDropdownsFixed: function () { var e = this.$toolbar.innerHeight() + this.opts.toolbarFixedTopOffset, a = "fixed"; this.opts.toolbarFixedTarget !== document && (e = this.$toolbar.innerHeight() + this.$toolbar.offset().top + this.opts.toolbarFixedTopOffset, a = "absolute"), t(".redactor-dropdown-" + this.uuid).each(function () { t(this).css({ position: a, top: e + "px" }) }) }, unsetDropdownsFixed: function () { var e = this.$toolbar.innerHeight() + this.$toolbar.offset().top; t(".redactor-dropdown-" + this.uuid).each(function () { t(this).css({ position: "absolute", top: e + "px" }) }) } } }, upload: function () { return { init: function (e, a, o) { this.upload.direct = !1, this.upload.callback = o, this.upload.url = a, this.upload.$el = t(e), this.upload.$droparea = t("<div id=\"redactor-droparea\" />"), this.upload.$placeholdler = t("<div id=\"redactor-droparea-placeholder\" />").text(this.lang.get("upload_label")), this.upload.$input = t("<input type=\"file\" name=\"file\" />"), this.upload.$placeholdler.append(this.upload.$input), this.upload.$droparea.append(this.upload.$placeholdler), this.upload.$el.append(this.upload.$droparea), this.upload.$droparea.off("redactor.upload"), this.upload.$input.off("redactor.upload"), this.upload.$droparea.on("dragover.redactor.upload", t.proxy(this.upload.onDrag, this)), this.upload.$droparea.on("dragleave.redactor.upload", t.proxy(this.upload.onDragLeave, this)), this.upload.$input.on("change.redactor.upload", t.proxy(function (t) { t = t.originalEvent || t, this.upload.traverseFile(this.upload.$input[0].files[0], t) }, this)), this.upload.$droparea.on("drop.redactor.upload", t.proxy(function (t) { t.preventDefault(), this.upload.$droparea.removeClass("drag-hover").addClass("drag-drop"), this.upload.onDrop(t) }, this)) }, directUpload: function (t, a) { this.upload.direct = !0, this.upload.traverseFile(t, a) }, onDrop: function (t) { t = t.originalEvent || t; var a = t.dataTransfer.files; this.upload.traverseFile(a[0], t) }, traverseFile: function (t, a) { if (this.opts.s3) return this.upload.setConfig(t), void this.upload.s3uploadFile(t); var e = !window.FormData ? null : new FormData; if (window.FormData) { this.upload.setConfig(t); var o = "image" == this.upload.type ? this.opts.imageUploadParam : this.opts.fileUploadParam; e.append(o, t) } this.progress.show(), this.core.setCallback("uploadStart", a, e), this.upload.sendData(e, a) }, setConfig: function (e) { this.upload.getType(e), this.upload.direct && (this.upload.url = "image" == this.upload.type ? this.opts.imageUpload : this.opts.fileUpload, this.upload.callback = "image" == this.upload.type ? this.image.insert : this.file.insert) }, getType: function (e) { this.upload.type = "image", -1 == this.opts.imageTypes.indexOf(e.type) && (this.upload.type = "file") }, getHiddenFields: function (e, a) { return !1 === e || "object" != typeof e ? a : (t.each(e, t.proxy(function (e, o) { null !== o && 0 === o.toString().indexOf("#") && (o = t(o).val()), a.append(e, o) }, this)), a) }, sendData: function (a, o) { "image" == this.upload.type ? (a = this.upload.getHiddenFields(this.opts.uploadImageFields, a), a = this.upload.getHiddenFields(this.upload.imageFields, a)) : (a = this.upload.getHiddenFields(this.opts.uploadFileFields, a), a = this.upload.getHiddenFields(this.upload.fileFields, a)); var e = new XMLHttpRequest; e.open("POST", this.upload.url), e.setRequestHeader("X-Requested-With", "XMLHttpRequest"), e.onreadystatechange = t.proxy(function () { if (4 == e.readyState) { var a = e.responseText; a = a.replace(/^\[/, ""), a = a.replace(/\]$/, ""); var r; try { r = "string" == typeof a ? t.parseJSON(a) : a } catch (e) { r = { error: !0 } } this.progress.hide(), this.upload.direct || this.upload.$droparea.removeClass("drag-drop"), this.upload.callback(r, this.upload.direct, o) } }, this), e.send(a) }, onDrag: function (t) { t.preventDefault(), this.upload.$droparea.addClass("drag-hover") }, onDragLeave: function (t) { t.preventDefault(), this.upload.$droparea.removeClass("drag-hover") }, clearImageFields: function () { this.upload.imageFields = {} }, addImageFields: function (e, t) { this.upload.imageFields[e] = t }, removeImageFields: function (e) { delete this.upload.imageFields[e] }, clearFileFields: function () { this.upload.fileFields = {} }, addFileFields: function (e, t) { this.upload.fileFields[e] = t }, removeFileFields: function (e) { delete this.upload.fileFields[e] }, s3uploadFile: function (e) { this.upload.s3executeOnSignedUrl(e, t.proxy(function (t) { this.upload.s3uploadToS3(e, t) }, this)) }, s3executeOnSignedUrl: function (e, t) { var a = new XMLHttpRequest, o = "-1" === this.opts.s3.search(/\?/) ? "&" : "?"; a.open("GET", this.opts.s3 + o + "name=" + e.name + "&type=" + e.type, !0), a.overrideMimeType && a.overrideMimeType("text/plain; charset=x-user-defined"); var r = this; a.onreadystatechange = function () { 4 == this.readyState && 200 == this.status ? (r.progress.show(), t(decodeURIComponent(this.responseText))) : 4 == this.readyState && 200 != this.status }, a.send() }, s3createCORSRequest: function (e, t) { var a = new XMLHttpRequest; return "withCredentials" in a ? a.open(e, t, !0) : "undefined" == typeof XDomainRequest ? a = null : (a = new XDomainRequest, a.open(e, t)), a }, s3uploadToS3: function (e, a) { var o = this.upload.s3createCORSRequest("PUT", a); o && (o.onload = t.proxy(function () { if (200 == o.status) { this.progress.hide(); var e = a.split("?"); if (!e[0]) return !1; this.upload.direct || this.upload.$droparea.removeClass("drag-drop"); var t = { filelink: e[0] }; if ("file" == this.upload.type) { var r = e[0].split("/"); t.filename = r[r.length - 1] } this.upload.callback(t, this.upload.direct, !1) } else; }, this), o.onerror = function () { }, o.upload.onprogress = function () { }, o.setRequestHeader("Content-Type", e.type), o.setRequestHeader("x-amz-acl", "public-read"), o.send(e)) } } }, utils: function () { return { isMobile: function () { return /(iPhone|iPod|BlackBerry|Android)/.test(navigator.userAgent) }, isDesktop: function () { return !/(iPhone|iPod|iPad|BlackBerry|Android)/.test(navigator.userAgent) }, isString: function (e) { return "[object String]" == Object.prototype.toString.call(e) }, isEmpty: function (e, a) { return e = e.replace(/[\u200B-\u200D\uFEFF]/g, ""), e = e.replace(/&nbsp;/gi, ""), e = e.replace(/<\/?br\s?\/?>/g, ""), e = e.replace(/\s/g, ""), e = e.replace(/^<p>[^\W\w\D\d]*?<\/p>$/i, ""), e = e.replace(/<iframe(.*?[^>])>$/i, "iframe"), e = e.replace(/<source(.*?[^>])>$/i, "source"), !1 !== a && (e = e.replace(/<[^\/>][^>]*><\/[^>]+>/gi, ""), e = e.replace(/<[^\/>][^>]*><\/[^>]+>/gi, "")), e = t.trim(e), "" === e }, normalize: function (e) { return "undefined" == typeof e ? 0 : parseInt(e.replace("px", ""), 10) }, hexToRgb: function (e) { if ("undefined" != typeof e) { if (-1 == e.search(/^#/)) return e; var t = /^#?([a-f\d])([a-f\d])([a-f\d])$/i; e = e.replace(t, function (e, t, a, o) { return t + t + a + a + o + o }); var a = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e); return "rgb(" + parseInt(a[1], 16) + ", " + parseInt(a[2], 16) + ", " + parseInt(a[3], 16) + ")" } }, getOuterHtml: function (e) { return t("<div>").append(t(e).eq(0).clone()).html() }, getAlignmentElement: function (e) { return -1 === t.inArray(e.tagName, this.opts.alignmentTags) ? t(e).closest(this.opts.alignmentTags.toString().toLowerCase(), this.$editor[0]) : t(e) }, removeEmptyAttr: function (e, a) { var o = t(e); return !("undefined" != typeof o.attr(a)) || !("" !== o.attr(a)) && (o.removeAttr(a), !0) }, removeEmpty: function (e, a) { var o = t(t.parseHTML(a)); if (o.find(".redactor-invisible-space").removeAttr("style").removeAttr("class"), 0 === o.find("hr, br, img, iframe, source").length) { var r = t.trim(o.text()); this.utils.isEmpty(r, !1) && o.remove() } }, saveScroll: function () { this.saveEditorScroll = this.$editor.scrollTop(), this.saveBodyScroll = t(window).scrollTop(), this.opts.scrollTarget && (this.saveTargetScroll = t(this.opts.scrollTarget).scrollTop()) }, restoreScroll: function () { "undefined" == typeof this.saveScroll && "undefined" == typeof this.saveBodyScroll || (t(window).scrollTop(this.saveBodyScroll), this.$editor.scrollTop(this.saveEditorScroll), this.opts.scrollTarget && t(this.opts.scrollTarget).scrollTop(this.saveTargetScroll)) }, createSpaceElement: function () { var e = document.createElement("span"); return e.className = "redactor-invisible-space", e.innerHTML = this.opts.invisibleSpace, e }, removeInlineTags: function (e) { var a = this.opts.inlineTags; a.push("span"), "PRE" == e.tagName && a.push("a"), t(e).find(a.join(",")).not("span.redactor-selection-marker").contents().unwrap() }, replaceWithContents: function (e, a) { var o = this; return t(e).replaceWith(function () { return !0 === a && o.utils.removeInlineTags(this), t(this).contents() }), t(e) }, replaceToTag: function (e, a, o) { var r, l = this; return t(e).replaceWith(function () { r = t("<" + a + " />").append(t(this).contents()); for (var e = 0; e < this.attributes.length; e++)r.attr(this.attributes[e].name, this.attributes[e].value); return !0 === o && l.utils.removeInlineTags(r), r }), r }, isStartOfElement: function () { var e = this.selection.getBlock(); if (!e) return !1; var t = this.caret.getOffsetOfElement(e); return !(0 !== t) }, isEndOfElement: function (e) { if ("undefined" == typeof e) { var e = this.selection.getBlock(); if (!e) return !1 } var a = this.caret.getOffsetOfElement(e), o = t.trim(t(e).text()).replace(/\n\r\n/g, ""); return !(a != o.length) }, isStartOfEditor: function () { var e = this.caret.getOffsetOfElement(this.$editor[0]); return !(0 !== e) }, isEndOfEditor: function () { var e = this.$editor[0], a = this.caret.getOffsetOfElement(e), o = t.trim(t(e).html().replace(/(<([^>]+)>)/gi, "")); return !(a != o.length) }, isBlock: function (e) { return e = e[0] || e, e && this.utils.isBlockTag(e.tagName) }, isBlockTag: function (e) { return "undefined" != typeof e && this.reIsBlock.test(e) }, isTag: function (e, a) { var o = t(e).closest(a, this.$editor[0]); return !(1 != o.length) && o[0] }, isSelectAll: function () { return this.selectAll }, enableSelectAll: function () { this.selectAll = !0 }, disableSelectAll: function () { this.selectAll = !1 }, isRedactorParent: function (e) { return !!e && !(0 === t(e).parents(".redactor-editor").length || t(e).hasClass("redactor-editor")) && e }, isCurrentOrParentHeader: function () { return this.utils.isCurrentOrParent(["H1", "H2", "H3", "H4", "H5", "H6"]) }, isCurrentOrParent: function (e) { var a = this.selection.getParent(), o = this.selection.getCurrent(); if (t.isArray(e)) { var r = 0; return t.each(e, t.proxy(function (e, t) { this.utils.isCurrentOrParentOne(o, a, t) && r++ }, this)), 0 != r } return this.utils.isCurrentOrParentOne(o, a, e) }, isCurrentOrParentOne: function (e, t, a) { return a = a.toUpperCase(), t && t.tagName === a ? t : !!(e && e.tagName === a) && e }, isOldIe: function () { return !!(this.utils.browser("msie") && 9 > parseInt(this.utils.browser("version"), 10)) }, isLessIe10: function () { return !!(this.utils.browser("msie") && 10 > parseInt(this.utils.browser("version"), 10)) }, isIe11: function () { return !!navigator.userAgent.match(/Trident\/7\./) }, browser: function (e) { var t = navigator.userAgent.toLowerCase(), a = /(opr)[\/]([\w.]+)/.exec(t) || /(chrome)[ \/]([\w.]+)/.exec(t) || /(webkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(t) || /(webkit)[ \/]([\w.]+)/.exec(t) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(t) || /(msie) ([\w.]+)/.exec(t) || 0 <= t.indexOf("trident") && /(rv)(?::| )([\w.]+)/.exec(t) || 0 > t.indexOf("compatible") && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(t) || []; return "safari" == e ? "undefined" != typeof a[3] && "safari" == a[3] : "version" == e ? a[2] : "webkit" == e ? "chrome" == a[1] || "opr" == a[1] || "webkit" == a[1] : "rv" == a[1] ? "msie" == e : "opr" == a[1] ? "webkit" == e : e == a[1] }, strpos: function (e, t, a) { var o = e.indexOf(t, a); return !!(0 <= o) && o }, disableBodyScroll: function () { var e = t("html"), a = window.innerWidth; if (!a) { var o = document.documentElement.getBoundingClientRect(); a = o.right - Math.abs(o.left) } var r = document.body.clientWidth < a, l = this.utils.measureScrollbar(); e.css("overflow", "hidden"), r && e.css("padding-right", l) }, measureScrollbar: function () { var e = t("body"), a = document.createElement("div"); a.className = "redactor-scrollbar-measure", e.append(a); var o = a.offsetWidth - a.clientWidth; return e[0].removeChild(a), o }, enableBodyScroll: function () { t("html").css({ overflow: "", "padding-right": "" }), t("body").remove("redactor-scrollbar-measure") } } } }, t(window).on("load.tools.redactor", function () { t("[data-tools=\"redactor\"]").redactor() }), e.prototype.init.prototype = e.prototype })(jQuery);